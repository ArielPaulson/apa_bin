#!/bin/bash
set -e

exit  ## UNDER CONSTRUCTION -- multi-flowcell handling in the works

## TO DO:
## create single order CSV master which combines flowcells.
## then run block on master CSV, allowing fq merging to reach across flowcells.

## Must be run from a 'code' directory, i.e. /path/to/cbio.xxx.nnn/code
## Takes an /n/analysis run directory and creates a job launcher script based on the Sample_Report.csv file
## May also create a fastq merger script, which must be run before the launcher.


lab=$1       # e.g. 'Si'
user=$2      # e.g. 'zen'
order=$3     # e.g. 'MOLNG-1386'
fcs=$4       # e.g. 'C7UCKANXX' or 'H72MCAFXX,H7W2HAFXX,H7W2WAFXX'
geno=$5      # e.g. 'dm3'
anno=$6      # e.g. 'Ens_78'
direc=$7     # 1|0 if directional libraries -- ignored for ChIPseq ops
cores=$8     # cores for bowtie2m, samtools; default 1
mem=$9       # mem for samtools sort; default '1G'
nomerge=${10}   # do not combine fastqs by sample (i.e. one run per lane-barcode combination); default: will combine.

if [ -z $direc ]; then direc=0; fi
if [ -z $cores ]; then cores=1; fi
if [ -z $mem ]; then mem='1G'; fi
if [ -z $nomerge ]; then nomerge=0; fi
if [ $nomerge -eq 0 ]; then combine=1; else combine=0; fi  # transfer $nomerge to $combine; gets rid of double-negatives in tests below
params="$geno $anno $direc $cores $mem"

fqpath=$(readlink -f ../data/fastq)
if [ ! -d $fqpath ]; then mkdir $fqpath; fi
launch=launch.sh
merge=merge.sh
rm -f $launch
rm -f $merge


fclist=($(echo $fcs | sed 's/,/ /g'))
nfc=${#fclist[@]}

for flowcell in ${fclist[@]}
do
    
    path=/n/analysis/$lab/$user/$order/$flowcell
    csv=$path/Sample_Report.csv
    fcsv=$flowcell.Sample_Report.csv
    
    (head -1 $csv && grep ",$order," $csv) > $fcsv
    ends=($(tail -n +2 $fcsv | cut -f9 -d, | sort -u)) && echo "ENDS: ${#ends[@]}: ${ends[@]}"
    if [ -z ${ends[1]} ]; then ends1=1; else ends1=${ends[1]}; fi
    lanes=($(tail -n +2 $fcsv | cut -f4 -d, | sort -u)) && echo "LANES: ${#lanes[@]}: ${lanes[@]}"
    if [ ${#lanes[@]} -eq 1 ] && [ $nfc -eq 1 ]; then single=1; else single=0; fi  # single-lane: rename fastqs with sample names, whether $combine or not
    
    if [ $combine -eq 0 ] || [ $single -eq 1 ]; then
	
	## EITHER: do not combine fastqs by sample name
	## OR: combine, but there was only one lane of data, so nothing to combine -- just rename
	## Makes the assumption that sample names are unique within an order
	
	if [ $ends1 -eq 2 ]; then
	    
	    ## paired-end data
	    
	    echo -e "BRANCH: 1\nFLOWCELL: $flowcell\nCOMBINE: $combine\nSINGLE: $single\nENDS1: $ends1"  # reporter
	    
	    while read line
	    do
		## end number
		end=$(echo $line | cut -f9 -d,)
		## sample name
		sample=$(echo $line | cut -f5 -d,)
		
		if [ "$end" == "1" ]; then
		    
		    ## end 1 fastq
		    fastq1=$(echo $line | cut -f1 -d,)
		    ## set fastq symlink
		    if [ $single -eq 1 ]; then
			fqlink1=$fqpath/${sample}_1.fastq.gz
		    else
			fqlink1=$fqpath/$fastq1
		    fi
		    ## symlink to local fastq directory
		    ln -sf $path/$fastq1 $fqlink1
		    
		elif [ "$end" == "2" ]; then
		    
		    ## end 2 fastq
		    fastq2=$(echo $line | cut -f1 -d,)
		    ## set fastq symlink
		    if [ $single -eq 1 ]; then
			fqlink2=$fqpath/${sample}_2.fastq.gz
		    else
			fqlink2=$fqpath/$fastq2
		    fi
		    ## symlink to local fastq directory
		    ln -sf $path/$fastq2 $fqlink2
		    
		    ## confirm fastq pair
		    echo "$sample => $fastq1 , $fastq2"
		    ## add pair to launch script
		    echo "./run.sh $sample $fqlink1 $fqlink2 $params &" >> $launch
		    
		fi
	    done < <(tail -n +2 $fcsv)
	    
	else
	    ## single-end data
	    
	    echo -e "BRANCH: 2\nFLOWCELL: $flowcell\nCOMBINE: $combine\nSINGLE: $single\nENDS1: $ends1"  # reporter
	    
	    while read line
	    do
		## sample name
		sample=$(echo $line | cut -f5 -d,)
		
		## end 1 fastq
		fastq=$(echo $line | cut -f1 -d,)
		## set fastq symlink
		if [ $single -eq 1 ]; then
		    fqlink=$fqpath/$sample.fastq.gz
		else
		    fqlink=$fqpath/$fastq
		fi
		## symlink to local fastq directory
		ln -sf $path/$fastq $fqlink
		
		## confirm fastq
		echo "$sample => $fastq"
		## add sample to launch script
		echo "./run.sh $sample $fqlink NA $params &" >> $launch
	    done < <(tail -n +2 $fcsv)
	    
	fi
	
    else
	
	## combine fastqs by sample name
	## getting here also implies that more than one lane of data exists
	
	samples=($(tail -n +2 $fcsv | cut -f5 -d, | sort -u))
	
	for sample in ${samples[@]}
	do
	    
	    if [ $ends1 -eq 2 ]; then
		
		## paired-end data
		
		echo -e "BRANCH: 3\nFLOWCELL: $flowcell\nSAMPLE: $sample\nCOMBINE: $combine\nSINGLE: $single\nENDS1: $ends1"  # reporter
		
		## get all sample fastqs
		fqlist1=($(awk -v s=$sample -v p=$path 'BEGIN { FS="," } { if ($5==s&&$9==1) print p"/"$1 }' $fcsv))  # array
		fqlist2=($(awk -v s=$sample -v p=$path 'BEGIN { FS="," } { if ($5==s&&$9==2) print p"/"$1 }' $fcsv))  # array
		## set fastq symlinks
		fqlink1=$fqpath/${sample}_1.fastq.gz
		fqlink2=$fqpath/${sample}_2.fastq.gz
		## confirm fastq pairs
		echo "$sample => ${fqlist1[@]} , ${fqlist2[@]}"
		## add merge sets to merge script
		echo "zcat ${fqlist1[@]} | gzip > $fqlink1" >> $merge
		echo "zcat ${fqlist2[@]} | gzip > $fqlink2" >> $merge
		## add merged fastq pair to launch script
		echo "./run.sh $sample $fqlink1 $fqlink2 $params &" >> $launch
		
	    else
		
		## single-end data
		
		echo -e "BRANCH: 4\nFLOWCELL: $flowcell\nSAMPLE: $sample\nCOMBINE: $combine\nSINGLE: $single\nENDS1: $ends1"  # reporter
		
		## get all sample fastqs
		fqlist=($(awk -v s=$sample -v p=$path 'BEGIN { FS="," } { if ($5==s) print p"/"$1 }' $fcsv))  # array
		## set fastq symlink
		fqlink=$fqpath/$sample.fastq.gz
		## confirm fastq pair
		echo "$sample => ${fqlist[@]}"
		## add merge set to merge script
		echo "zcat ${fqlist[@]} | gzip > $fqlink" >> $merge
		## add merged fastq to launch script
		echo "./run.sh $sample $fqlink NA $params &" >> $launch
		
	    fi
	    
	done
	
    fi
    
done

