#!/usr/bin/env perl
require '/home/apa/apa_routines.pm';
use Getopt::Long;
use Pod::Usage;
use strict;



## NEW Workflow:
## 0. combine gene models and repeats
## 1. trim input fastq
## 2. remove too-short fragments
## 3. align everything with ShortStack
## 4. align leftovers with Tophat2
## 5. merge bam + assign length groups
## 6. quantitate + bigWig total bam
## 7. size-fractionate bam and quantitate by size

## OPTIONAL PIRNA POST-WORKFLOW
## 8. given size range, extract pi-size.bam + assign signatures
## 9. bigWig piRNA fractions
## 10. detect piRNA clusters
## 11. quantitate piRNA counts in genes+TEs (total & signatures)
## 12. quantitate piRNA clusters in genes+TEs


### Dependencies
my $bin = '/home/apa/local/bin';
my $indexes = '/n/data1/genomes/indexes';
my $SmallRnaQuantitate2 = "$bin/smallRNA-quantitate2";
my $readCount = "$bin/readCount";
my $bam2track = "$bin/bam2track";
my $sortBedCoord = "$bin/sortBedCoord";
my $stripMultireads = "$bin/stripMultireads";
my $mergeIdxStats = "$bin/mergeIdxStats";
my $mergeMatrix = "$bin/mergeMatrix";
my $bed2BigBed = "$bin/scriptutils/bedToBigBed";
my $splitBam = "$bin/splitBam";
my $tracks2hub = "$bin/tracks2hub";
my $trimadap = "$bin/scriptutils/adapter_collection.fa";   # adapter fasta for trimming; may specify non-default with '-t'
my $trimmomatic = '/n/local/stage/trimmomatic/Trimmomatic-0.30/trimmomatic-0.30.jar';
my $ShortStack = "$bin/scriptutils/ShortStack/ShortStack-smallRNApipeline";
my $java = 'java';
my $tophat2 = 'tophat';
my $bowtie1 = 'bowtie';
my $bowtie2 = 'bowtie2';
my $bowtie1_build = 'bowtie-build';
my $bowtie2_build = 'bowtie2-build';
my $samtools = 'samtools';



### Inputs

## Mandatory
my $inputfq;   # input fastq
my $outdir;    # output location, if not clobbering

## Optional, for Fastq Handling
my $lenmin;    # smallest post-trimming fragment length to analyze, default 16
my $lenmax;    # largest post-trimming fragment length to analyze, default 41
my $alnmax;    # maximum allowed alignments before a read is ignored; default 100
my $ranmax;    # ShortStack --ranmax argument; default int($alnmax/10)
my $notrim;    # indicate that input fastq is ALREADY TRIMMED.

## Optional, for Analysis 
## Every argument triggers its own layer of analysis
my $geno;      # genome index label, e.g. 'dm6', 'mm10'  ### REQUIRES $anno
my $anno;      # genome-annotation label, e.g. 'Ens_80'  ### REQUIRES $geno
my $cores;     # N cores for bowtie2 alignment, default 1 (if running alignments)
my $mem;       # mem arg for 'samtools sort', default '5G' (if running alignments)
my $hubname;   # track name for hub files



### Get arguments
GetOptions("i=s"=>\$inputfq, "o=s"=>\$outdir, "TE=s"=>\$TEpref, "ln=i"=>\$lenmin, "lx=i"=>\$lenmax, "ax=i"=>\$alnmax, "rx=i"=>\$ranmax, "rp=s"=>\$pirange, "rm=s"=>\$mirange, "g=s"=>\$geno, "a=s"=>\$anno, "c=i"=>\$cores, "m=s"=>\$mem, "h=s"=>\$hubname, "t=s"=>\$trimadap, "no-trim"=>\$notrim, "no-pi-split"=>\$no_pi_split);



### Globals
my $genodir   = "$indexes/$geno";   # may not be specified
my $annodir   = "$genodir/$anno";   # may not be specified
my $genoidx   = "$genodir/$geno";   # prefix only
my $srnadir   = "$annodir/smallRNA";
my $srnaidx   = "$srnadir/$geno.$anno.smallRNA";  # prefix only
my $TEgtf     = "$genodir/$geno.repeats.gtf";
my $gtf       = "$annodir/$geno.$anno.cuff.gtf";
my $gtfidx    = "$annodir/$geno.$anno.cuff.gtf.index/$geno.$anno.cuff";  # prefix only
my $cmdline   = (split /\n/, qx/ps -o args $$/)[1];  # just for reporting
my $restart;  # flag if pipeline is restarting or not
my %trimlens; # post-trim length histogram
my %stats;    # counts for various read fractions
my %pstats;   # counts, as % total
my %pstats2;  # counts, as % reads in size range
my %stage;    # stage completion tracking
my %maxstage; # highest consecutive stage completed (restart after here)
my %F;        # filename storage
my %B;        # bed filename storage


### Test arguments; initialize workspace and some globals
die "$0: No input specified!\n" unless $inputfq;
chomp($inputfq = `readlink -f $inputfq`);
die "$0: Cannot find input fastq '$inputfq'!\n" unless -e $inputfq;
if ($anno || $geno) {
    die "$0: Must specify -g along with -a!\n" if $anno && !$geno;
    die "$0: Must specify -a along with -g!\n" if $geno && !$anno;
    die "$0: Geno/anno combination '$annodir' not found!\n" unless -d $annodir;
    die "$0: Geno/anno combination has no smallRNA build!\n" unless -d $srnadir;
    die "$0: Cannot resolve genome/annotation GTF file '$gtf'!\n" unless -e $gtf;
}
die "$0: Cannot find indicated adapter fasta '$trimadap'!\n" if $trimadap && ! -e $trimadap;
die "$0: -ln must be a positive integer!\n" if $lenmin =~ /\D/;
die "$0: -lx must be a positive integer!\n" if $lenmax =~ /\D/;
die "$0: -ax must be a positive integer!\n" if $alnmax =~ /\D/;
$lenmin = 16 unless $lenmin;    # default minimum post-trim fragment length (smallest miRNA length, basically)
$lenmax = 41 unless $lenmax;    # default maximum post-trim fragment length (smallest trimmed fragment size, given Trimmomatic settings below, basically -- larger = untrimmable)
$alnmax = 100 unless $alnmax;   # default maximum alignments per read (before read is ignored)
$ranmax = int($alnmax/10) unless $ranmax;  # ShortStack --ranmax param

$cores = 1 unless $cores;
die "$0: Invalid number of cores '$cores'!\n" if $cores <=0 || $cores =~ /\D/;
$mem = '5G' unless $mem;
die "$0: Invalid memory string '$mem'!  Try something like '5G'.\n" if $mem !~ /^\d+[KMG]$/;

if ($hubname) {
    $hubname =~ s/ /_/g;
    $hubname .= "_sRNA" unless $hubname =~ /srna/i;
}


### Output directory stuff
chomp($outdir = `readlink -f $outdir`);
my $trackdir = "$outdir/tracks";
my $fastqdir = "$outdir/fastq";
die "$0: Output location '$outdir' already exists!\n" if -d $outdir;   ##### FIXME: PIPELINE-RESTARTING MECHANISM NOT WORKING YET *****
system "mkdir $outdir";
foreach my $subdir ($trackdir, $fastqdir) {
    system "mkdir $subdir";
    die "$0: Failed to create subdirectory '$subdir'!\n" unless -d $subdir;
}


### Logfile stuff
my $log = "$outdir/smallRNA-pipeline2.log";
my $LOG;  # $log filehandle
if (-e $log) {
    $restart = 1;
    open $LOG, '>>', $log or die "$0: Failed to reopen log file '$log': $!\n";
} else {
    open $LOG, '>', $log or die "$0: Failed to open log file '$log': $!\n";
}




### Filename control
### Also build ShortStack options, once filenames are settled

## input fractions
$F{input}{FQ} = $inputfq =~ /\.gz$/ ? "$fastqdir/input.fastq.gz" : "$fastqdir/input.fastq";  # input may not have been gzipped?
system "ln -sf $inputfq $F{input}{FQ}";  # Always keep the input as a symlink in the output directory
chomp(my $readlen = `head -2 $F{input}{FQ} | tail -1 | wc -c`);
$readlen--;  # remove newline contribution
$F{input}{UFQ} = "$fastqdir/unaligned.fastq.gz";  # single master unaligned fastq (subset $frac/$aln UFQs will still exist)
$F{trimmed}{FQ} = "$fastqdir/trimmed.fastq.gz";
$F{trimmed}{ERR} = "$outdir/trimmed.stderr.txt";
$F{trimmed}{LOG} = "$outdir/trimmed.trimlog.txt";
$F{trimmed}{HISTO} = "$outdir/trimmed.histogram.txt";
$F{trimmed}{FQR} = "$outdir/trimmed.fqReads.txt";

    $F{$frac}{FQ} = "$fastqdir/$frac.fastq.gz";  # keep all fraction fastqs in fastq dir
    $F{$frac}{DIR} = "$outdir/analysis_$frac";   # all analysis on fastqs goes into separate fraction directories
    $F{$frac}{PREFIX} = "$F{$frac}{DIR}/$frac";
    $F{$frac}{UFQ} = "$F{$frac}{PREFIX}.unaligned.fastq.gz";  # final TE/genome-unaligned fraction only
    

		$F{$frac}{$ref}{BW_W_ALL_SYM} = "$trackdir/$frac.$ref.plus.APM.bw";
		$F{$frac}{$ref}{BW_C_ALL_SYM} = "$trackdir/$frac.$ref.minus.APM.bw";
		$F{$frac}{$ref}{BW_W_UNQ_SYM} = "$trackdir/$frac.$ref.unique.plus.APM.bw";
		$F{$frac}{$ref}{BW_C_UNQ_SYM} = "$trackdir/$frac.$ref.unique.minus.APM.bw";



## Lists of un-prefixed files generated by certain aligners (i.e. $F{$frac}{$ref}{PREFIX} must be prepended manually)

#					if ($chars[0] eq 'T') {
#						$frac = 'piRNA-U';   # U-type signature
#					} elsif ($chars[9] eq 'A') {
#						$frac = 'piRNA-A';   # A-type signature
#					} else {
#						$frac = 'piRNA-X';
#					}

&logreport("Trimming input fastq: ".`date`, 1, $LOG);

## Trimmomatic manual: http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/TrimmomaticManual_V0.32.pdf
## See also: http://seqanswers.com/forums/showthread.php?t=11186 for discussion on simpleClip value -- '6' will require something like 10 high-quality base matches
my $trimcmd = "$java -Xmx$mem -jar $trimmomatic SE -threads $cores -trimlog $F{trimmed}{LOG} $F{input}{FQ} $F{trimmed}{FQ} ILLUMINACLIP:$trimadap:2:12:6 MINLEN:1 2> $F{trimmed}{ERR}";

####### FIXME: recalibrate trim cmd to require only 6bp at end
#######        and test this w/ artificial reads!  Ensure min matches occur ONLY at 3' ends.

&logreport("Trimmomatic Line: \"$trimcmd\"\n\n", 1, $LOG);
system('bash','-c',$trimcmd);
&execute("cat $F{trimmed}{LOG} | rev | cut -f4 -d' ' | rev | sort -n | uniq -c | awk '{ print \$2\"\\t\"\$1 }' > $F{trimmed}{HISTO}", 1, $LOG, 2);
&execute("rm -f $F{trimmed}{LOG}", 1, $LOG, 3);   # massive file; only need a few stats from it

&evaluate_trimming;  # loads %stats, %pstats, %trimlens

my $TFI = &open2('R', $F{trimmed}{FQ}, 'Trimmed fastq');
my $TFO = &open2('W', $filterfq, 'Filtered trimmed fastq');
my $TFS = &open2('W', $toosmallfq, 'Too-small filtered trimmed fastq');  ## IF TOO-SMALL PARAM SET
my $TFL = &open2('W', $toolargefq, 'Too-large filtered trimmed fastq');  ## IF TOO-LARGE PARAM SET
foreach my $i (keys %LFQ) {
	next if $i == 0;  # nothing to print here
	my $FH = &open2('W', $LFQ{$i}{FQ}, "${i}bp fastq");
	$LFQ{$i}{FH} = $FH;
}
my ($i, $len, @rec, %trimlens);
while (<$TFI>) {
	$i++;
	if ($i == 2) {
		$len = length($_)-1;   # -1 because of newline
		$trimlen{$len}++;
	} elsif ($i == 4) {
		my $iFH = $LFQ{$i}{FH};
		print $iFH @rec;
		if ($len < $minlen) {
			print $TFS @rec;  # IF TOO-SMALL PARAM SET
		} elsif ($len > $maxlen) {
			print $TFL @rec;  # IF TOO-LARGE PARAM SET 
		} else {
			print $TFO @rec;
		}
		@rec = ();
	}
	push @rec, $_;
}
close $TFO;
close $TFI;
close $TFS;  ## IF TOO-SMALL PARAM SET
close $TFL;  ## IF TOO-LARGE PARAM SET
foreach my $i (keys %LFQ) {
	next if $i == 0;
	my $FH = $LFQ{$i}{FQ};
	close $FH;
}

## PER-LENGTH FQRS -> MERGE INTO SEPARATE TOTAL FQR
my $fqlist;
$fqlist .= " $LFQ{$_}{FQ}" foreach sort {$a <=> $b} keys %LFQ;
&execute("$readCount --uhisto $fqlist | perl -pe 's!^$fastqdir/!!' > $F{trimmed}{FQR}", 1, $LOG, 2);

chomp(my $now = `date`);
&logreport("$stats{TOTAL} reads | $stats{TRIMLOST} lost to trimming ($pstats{TRIMLOST}%)\n\nSTAGE 1 COMPLETE: $now\n\n", 1, $LOG);


if ($notrim) {
	$stats{TOTAL} = $stats{ALLFRAC};  # If trimming, we already have TOTAL.  Otherwise, ALLFRAC will be the first total we see.
	&logreport("$stats{TOTAL} reads; no trimming took place\n", 1, $LOG);
}
my $msgblock = "\nFraction\tReads\tPctTotal\n";
foreach my $frac (@alnfracs) {
	$pstats{$frac} = sprintf("%0.2f", 100*$stats{$frac}/$stats{TOTAL});
	$msgblock .= "$frac\t$stats{$frac}\t$pstats{$frac}\n";
}
&logreport("$msgblock\n", 1, $LOG);



## https://github.com/MikeAxtell/ShortStack
## ShortStack core params -- NOT involving fraction/reference
my $fqout = "$outdir/ShortStack.unaligned.fastq";
&execute("$ShortStack --align_only --nostitch --bowtie_cores $cores --sort_mem $mem --mismatches 2 --mmap u --bowtie_m $alnmax --ranmax $ranmax --readfile $F{trimmed}{FQ} --bowtie_un $fqout --outprefix $outdir/ShortStack. --outdir $outdir --genomefile $refdata{$ref}{FA}", 1, $LOG, 3);
&execute("samtools index $F{$frac}{$ref}{BAM_ALL}", 1, $LOG, 3);
&execute("gzip -f $fqout", 1, $LOG, 2);
&execute("samtools idxstats $F{$frac}{$ref}{BAM_ALL} > $F{$frac}{$ref}{IDX_ALL}", 1, $LOG, 2);
&execute("$stripMultireads --mode2 --shortstack --index $F{$frac}{$ref}{BAM_ALL}", 1, $LOG, 3);
&execute("mv -f $F{$frac}{$ref}{BAM_SMR} $F{$frac}{$ref}{BAM_UNQ}", 1, $LOG, 3);
&execute("mv -f $F{$frac}{$ref}{BAM_SMR}.bai $F{$frac}{$ref}{BAM_UNQ}.bai", 1, $LOG, 3);
&execute("samtools idxstats $F{$frac}{$ref}{BAM_UNQ} > $F{$frac}{$ref}{IDX_UNQ}", 1, $LOG, 3);

## Tophat runs mop up the splice junctions, ensuring that the unaligned fastqs really are unalignable.
## Splice junction aligns will also be added back to the genomic bams
## Total and unique fractions must be extracted from genomic and junction bams separately, then merged separately, since Tophat multiread filters differ from ShortStack
## https://ccb.jhu.edu/software/tophat/manual.shtml
## Tophat2 core params -- NOT involving fraction/reference

## Initial Tophat2 workflow
&execute("$tophat2 -p $cores -g 1 -x 1 -N 2 --bowtie1 --segment-length 10 --no-novel-juncs --no-coverage-search --transcriptome-index $gtfidx -o $F{$frac}{$ref}{J_DIR} $genoidx $fqout.gz", 1, $LOG, 3);
&execute("mv -f $F{$frac}{$ref}{J_BAM_RAW} $F{$frac}{$ref}{J_BAM_ALL}", 1, $LOG, 3);
&execute("samtools index $F{$frac}{$ref}{J_BAM_ALL}", 1, $LOG, 3);
&execute("samtools idxstats $F{$frac}{$ref}{J_BAM_ALL} > $F{$frac}{$ref}{J_IDX_ALL}", 1, $LOG, 2);
&execute("$stripMultireads --mode2 --tophat --index $F{$frac}{$ref}{J_BAM_ALL}", 1, $LOG, 3);
&execute("mv -f $F{$frac}{$ref}{J_BAM_SMR} $F{$frac}{$ref}{J_BAM_UNQ}", 1, $LOG, 3);
&execute("mv -f $F{$frac}{$ref}{J_BAM_SMR}.bai $F{$frac}{$ref}{J_BAM_UNQ}.bai", 1, $LOG, 3);
&execute("samtools idxstats $F{$frac}{$ref}{J_BAM_UNQ} > $F{$frac}{$ref}{J_IDX_UNQ}", 1, $LOG, 3);
&execute("samtools bam2fq -n -s >(gzip -f > $F{$frac}{UFQ}) $F{$frac}{$ref}{J_BAM_UNM}", 1, $LOG, 3, 1);  # REQUIRES BASH
&execute("mv $outdir/$_ $outdir/Tophat.$_", 1, $LOG, 2) foreach qw/ accepted_hits.bam unmapped.bam deletions.bed insertions.bed junctions.bed prep_reads.info align_summary.txt logs /;

##### FIXME: mergeAlignSummary on ShortStack and Tophat, then add together (maybe have small R script just for this purpose?)

## After Tophat2 completes, merge earlier ShortStack genome results with Tophat2's junction results
&execute("samtools merge $F{$frac}{$ref}{MR_BAM_ALL} $F{$frac}{$ref}{BAM_ALL} $F{$frac}{$ref}{J_BAM_ALL}", 1, $LOG, 3);

open my $BAM, '|-', "samtools view -bS - > $allbam";
open my $SAM, '-|', "samtools view -h $F{$frac}{$ref}{MR_BAM_ALL}";
my ($prev_type, %RG);
while (<$SAM>) {
	if (/^\@/) {
		if ($prev_type eq '@SQ' && $_ !~ /^\@SQ/) {
			## End of @SQ; print read group header lines
			my $i;
			foreach my $bp (sort {$a <=> $b} keys %trimlens) {
				next if $bp == 0;
				$i++;
				$RG{$bp} = $i;
				print $BAM "\@RG\tID:$i\tPU:1\tLB:1\tSM:$bp\tPL:illumina\n";
			}
		}
		print $BAM $_;
		($prev_type = $_) =~ s/\t.*//;
	} else {
		chomp;
		my @data = split /\t/, $_;
		my $bp = length($data[9]);
		print $BAM "$_\tRG:Z:$RG{$bp}\n";
	}
}
close $SAM;
close $BAM;


## NEW Workflow:
## 0. combine gene models and repeats
## 1. trim input fastq
## 2. remove too-short fragments
## 3. align everything with ShortStack
## 4. align leftovers with Tophat2
## 5. merge bam, assign length groups
## 6. quantitate + bigWig total bam
## 7. size-fractionate bam and quantitate by size


## outputs from ShortStack and subsequent processes
$F{$frac}{$ref}{DIR}     = "$F{$frac}{DIR}/${refname}_alignment";
$F{$frac}{$ref}{PREFIX}  = "$F{$frac}{$ref}{DIR}/$frac.$ref";
$F{$frac}{$ref}{UFQ}     = "$F{$frac}{$ref}{PREFIX}.unaligned.fastq.gz";
$F{$frac}{$ref}{ALN_SUM} = "$F{$frac}{$ref}{PREFIX}.align_summary.txt";
$F{$frac}{$ref}{BAM_ALL} = "$F{$frac}{$ref}{PREFIX}.bam";
$F{$frac}{$ref}{BAM_SMR} = "$F{$frac}{$ref}{PREFIX}.stripMultireads.bam";
$F{$frac}{$ref}{BAM_UNQ} = "$F{$frac}{$ref}{PREFIX}.unique.bam";
$F{$frac}{$ref}{IDX_ALL} = "$F{$frac}{$ref}{PREFIX}.idxstats.txt";
$F{$frac}{$ref}{IDX_UNQ} = "$F{$frac}{$ref}{PREFIX}.unique.idxstats.txt";


## after genome+junctions merge completes, generate track files
&execute("$bam2track -b $F{$frac}{$ref}{BAM_ALL} -g $geno -n APM --BW --stranded", 1, $LOG, 3);
&execute("ln -sf $F{$frac}{$ref}{BW_W_ALL} $F{$frac}{$ref}{BW_W_ALL_SYM}", 1, $LOG, 3);
&execute("ln -sf $F{$frac}{$ref}{BW_C_ALL} $F{$frac}{$ref}{BW_C_ALL_SYM}", 1, $LOG, 3);
&execute("$bam2track -b $F{$frac}{$ref}{BAM_UNQ} -g $geno -n APM --BW --stranded", 1, $LOG, 3);
&execute("ln -sf $F{$frac}{$ref}{BW_W_UNQ} $F{$frac}{$ref}{BW_W_UNQ_SYM}", 1, $LOG, 3);
&execute("ln -sf $F{$frac}{$ref}{BW_C_UNQ} $F{$frac}{$ref}{BW_C_UNQ_SYM}", 1, $LOG, 3);


## Run Quantitator on total bam, unique bam
## This occurs after $ref-specific operations (and incorporates results from both)
&execute("$SmallRnaQuantitate3 -gb $F{$frac}{G}{BAM_ALL} -tb $F{$frac}{T}{BAM_ALL} -sb $F{$frac}{S}{BAM_ALL} -o $F{$frac}{PREFIX}.Total -g $geno -a $anno", 1, $LOG);
&execute("$SmallRnaQuantitate3 -gb $F{$frac}{G}{BAM_UNQ} -tb $F{$frac}{T}{BAM_UNQ} -sb $F{$frac}{S}{BAM_UNQ} -o $F{$frac}{PREFIX}.Unique -g $geno -a $anno", 1, $LOG);


## Split bam by read length and quantitate, bigWig each read-length bam
&execute("samtools split -u $ungrpallbam -f \"%!.all.bam\" $allbam", 1, $LOG, 3);
&execute("samtools split -u $ungrpunqbam -f \"%!.unq.bam\" $unqbam", 1, $LOG, 3);
foreach my $i (sort {$a <=> $b} keys %trimlens) {
	&execute("$bam2track -b $i.all.bam -g $geno -n APM --BW --stranded", 1, $LOG, 3);
	&execute("$bam2track -b $i.unq.bam -g $geno -n APM --BW --stranded", 1, $LOG, 3);
	&execute("ln -sf $F{$frac}{$ref}{BW_W_ALL} $F{$frac}{$ref}{BW_W_ALL_SYM}", 1, $LOG, 3);
	&execute("ln -sf $F{$frac}{$ref}{BW_C_ALL} $F{$frac}{$ref}{BW_C_ALL_SYM}", 1, $LOG, 3);
	&execute("ln -sf $F{$frac}{$ref}{BW_W_UNQ} $F{$frac}{$ref}{BW_W_UNQ_SYM}", 1, $LOG, 3);
	&execute("ln -sf $F{$frac}{$ref}{BW_C_UNQ} $F{$frac}{$ref}{BW_C_UNQ_SYM}", 1, $LOG, 3);
	&execute("$SmallRnaQuantitate3 -b $i.all.bam -o $F{$frac}{PREFIX}.Total -g $geno -a $anno", 1, $LOG);
	&execute("$SmallRnaQuantitate3 -b $i.unq.bam -o $F{$frac}{PREFIX}.Unique -g $geno -a $anno", 1, $LOG);
}
 





#### STUFF BELOW IS REFERENCE FOR HUB-FILE MAKING -- FUTURE WORK
#
#
#    my $hubgrp = "$anadir/groups.txt";
#    my $hubdb = "$anadir/trackDb.txt";
#    my $TE_cts = "$anadir/counts.TE.txt";
#    my $gene_cts = "$anadir/counts.gene.txt";
#   
#    ## Analysis Globals
#    my %AUXdat = (
#	'A'=>{'FQ'=>$piA, 'UFQ'=>$piA_NT, 'TRK'=>"$hubname.A", 'BCOL'=>'255,0,0', 'HCOL'=>'255,150,150'}, 
#	'U'=>{'FQ'=>$piU, 'UFQ'=>$piU_NT, 'TRK'=>"$hubname.U", 'BCOL'=>'0,0,255', 'HCOL'=>'150,150,255'}, 
#	'X'=>{'FQ'=>$piX, 'UFQ'=>$piX_NT, 'TRK'=>"$hubname.X", 'BCOL'=>'0,0,0', 'HCOL'=>'100,100,100'}
#	);  # data per piRNA signature type: Fastq file, Track file prefix, BED color, Hub color
#    
#    
#    ## Hub File Init
#    my $DBW;  # + strand block
#    my $DBC;  # - strand block
#    $DBW = "track ${hubname}_W\ncontainer multiWig\nshortLabel ${hubname}_W\nlongLabel $hubname, (+) Strand piRNA Alignments, 1 Align per Read, RPM, Colored by Signature (Red=A, Blue=U, Gray=None)\ngroup piRNA\n";
#    $DBW .= "aggregate transparentOverlay\nshowSubtrackColorOnUi on\ntype bigWig 0 100\nviewLimits 0:15\nmaxHeightPixels 200:100:0\nalwaysZero on\nautoScale on\nvisibility full\npriority 99\n";
#    $DBC = "track ${hubname}_C\ncontainer multiWig\nshortLabel ${hubname}_C\nlongLabel $hubname, (-) Strand piRNA Alignments, 1 Align per Read, RPM, Colored by Signature (Red=A, Blue=U, Gray=None)\ngroup piRNA\n";
#    $DBC .= "aggregate transparentOverlay\nshowSubtrackColorOnUi on\ntype bigWig 0 100\nviewLimits 0:15\nmaxHeightPixels 200:100:0\nalwaysZero on\nautoScale on\nvisibility full\npriority 99\n";
#    
#    
#   ## Process piRNAs per signature 
#    foreach my $sig (qw/ A U X /) {
#	
#	&logreport("\npiExtract analyzing $outdir : $sig-type : ".`date`, 1, $LOG);
#	
#	## Directories and file-set prefixes
#	my $bt2out = "$anadir/TE_$sig";
#	my $TE = "$bt2out/TE_hits";
#	my $TEU = "$bt2out/TE_hits.unq";
#	my $topout = "$anadir/genome_$sig";
#	my $all = "$topout/accepted_hits";
#	my $allU = "$topout/accepted_hits.unq";
#	my $unq = "$topout/accepted_hits_unqmary";
#	
#	
#	## TE alignment & quantitation, if indicated
#	if ($TEidx) {
#	    
#	    ## Bowtie2 TE alignment
#	    system "mkdir $bt2out";
#	    die "$0: Failed to create TE-bowtie2 output dir '$bt2out'!\n" unless -d $bt2out;
#	    system "$bowtie2 --un-gz $AUXdat{$sig}{UFQ} -p $cores -x $TEidx -U $AUXdat{$sig}{FQ} -S $TE.sam 2> $TE.align_stats.txt";
#	    system "$samtools view -F 4 -bS $TE.sam | $samtools sort -@ $cores -m $mem - $TE.sorted";
#	    system "mv -f $TE.sorted.bam $TE.bam";
#	    system "rm -f $TE.sam";
#	    
#	    ## Unique-reads and Stranded Bams
#	    system "$stripMultireads --mode2 --bowtie $TE.bam";
#	    system "rename stripMultireads unq $TE.*";  ############# MUST MATCH $TEU
#	    system "$samtools view -h -f 16 $TE.bam | $samtools view -Sb - > $TE.W.bam";
#	    system "$samtools view -h -F 16 $TE.bam | $samtools view -Sb - > $TE.C.bam";
#	    system "$samtools view -h -f 16 $TEU.bam | $samtools view -Sb - > $TEU.W.bam";
#	    system "$samtools view -h -F 16 $TEU.bam | $samtools view -Sb - > $TEU.C.bam";
#	    
#	    ## Counting hits
#	    system "for bam in $TE.*.bam; do samtools index \$bam; done";
#	    system "$samtools idxstats $TE.W.bam > $TE.W.idxstats.txt";
#	    system "$samtools idxstats $TE.C.bam > $TE.C.idxstats.txt";
#	    system "$samtools idxstats $TEU.W.bam > $TEU.W.idxstats.txt";
#	    system "$samtools idxstats $TEU.C.bam > $TEU.C.idxstats.txt";
#	    
#	}
#	
#	
#	## Tophat transcriptome/genome alignment (for 2 reasons: transcriptome prealignment, and also splice alignments)
#	system "$tophat -p $cores -o $topout --transcriptome-index=$gtfi --segment-length=10 --no-coverage-search --no-novel-juncs $bti $AUXdat{$sig}{FQ}";
#	system "$samtools index $all.bam";
#	
#
#	## Primary Alignments, Unique-read BAMs
#	system "$stripMultireads --mode1 --tophat --index $all.bam";
##	system "rename stripMultireads unq $all.*";  ############# MUST MATCH $ALLU
#	system "$samtools view -h -F 256 $all.bam | $samtools view -Sb - > $unq.bam";
#	system "$samtools index $unq.bam";
#	
#	
#	## Counts
#	system "$samtools view $unq.bam | $htseq_count -s yes -a 0 -m intersection-nonempty - $gtf > $unq.htseq_counts_sense.txt";
#	system "$samtools view $unq.bam | $htseq_count -s reverse -a 0 -m intersection-nonempty - $gtf > $unq.htseq_counts_anti.txt";
##	system "$samtools view $allU.bam | $htseq_count -s yes -a 0 -m intersection-nonempty - $gtf > $allU.htseq_counts_sense.txt";
##	system "$samtools view $allU.bam | $htseq_count -s reverse -a 0 -m intersection-nonempty - $gtf > $allU.htseq_counts_anti.txt";
#	
#	
#	## Stranded BAMs & bigWigs
#	system "$samtools view -h -f 16 $unq.bam | $samtools view -Sb - > $unq.W.bam";
#	system "$samtools view -h -F 16 $unq.bam | $samtools view -Sb - > $unq.C.bam";
#	system "$bam2track -b $unq.W.bam -g $geno -p $trackdir/$AUXdat{$sig}{TRK}.W --color=$AUXdat{$sig}{BCOL} -n APM --BB --BW";
#	system "$bam2track -b $unq.C.bam -g $geno -p $trackdir/$AUXdat{$sig}{TRK}.C --color=$AUXdat{$sig}{BCOL} -n APM --BB --BW --neg";
#	
#	
#	## extend trackDb files for A, U, X tracks
#	my $labelW = "${hubname}_${sig}type_W";
#	my $labelC = "${hubname}_${sig}type_C";
#	$DBW .= "\n\ttrack $labelW\n\tparent ${hubname}_W\n\tbigDataUrl $AUXdat{$sig}{TRK}.W.bw\n\ttype bigWig 0 100\n\tcolor $AUXdat{$sig}{HCOL}\n";
#	$DBC .= "\n\ttrack $labelC\n\tparent ${hubname}_C\n\tbigDataUrl $AUXdat{$sig}{TRK}.C.bw\n\ttype bigWig 0 100\n\tcolor $AUXdat{$sig}{HCOL}\n";
#    }
#    
#    
#    ## Create Counts Matrices
#    system "$mergeIdxStats -o $TE_cts $anadir/*/*.idxstats.txt";
#    system "$mergeMatrix -k 1 -v 2 -h 0 -o $gene_cts $anadir/*/*.htseq_counts_*.txt";
#    
#    ## Write Hub Files
#    open my $GRP, '>', $hubgrp or die "$0: Failed to write to hub group file '$hubgrp': $!\n";
#    print $GRP "\nname piRNA\nlabel piRNA Coverage by Signature\npriority 99\ndefaultIsClosed 0\n";
#    close $GRP;
#    open my $TDB, '>', $hubdb or die "$0: Failed to write to hub trackDb file '$hubdb': $!\n";
#    print $TDB "\n$DBW\n$DBC\n";
#    close $TDB;
#    
#    &logreport("\npiExtract analysis complete: ".`date`, 1, $LOG);
#}

$stage{7} = 1;   # POST-HUB STAGE MARKER // ADD THIS JUST FOR COMPLETENESS

&logreport("\nsmallRNA-pipeline2 complete: ".`date`, 1, $LOG);
close $LOG;
exit;





sub evaluate_trimming {
    
    if ($notrim) {
		$stats{TOTAL} = $pstats{TOTAL} = undef;  # get these later
		$stats{TRIMMED} = $stats{TRIMLOST} = 'NA';
		$pstats{TRIMMED} = $pstats{TRIMLOST} = 'NA';
    } else {
		chomp(my $trimstats = `grep "^Input" $F{trimmed}{ERR}`);
		($stats{TOTAL}, $stats{TRIMMED}, $stats{TRIMLOST}) = ($trimstats =~ /Input Reads: (\d+) Surviving: (\d+) .* Dropped: (\d+)/);
		if (!$stats{TOTAL}) {
			## No read totals??
			if (defined $stats{TOTAL}) {
				## 0 reads in input??
				&logreport("$0: Trimmomatic reports that the input fastq was empty!\n", 1, $LOG);
			} else {
				&logreport("$0: Failed to interpret Trimmomatic output: cannot find read statistics!\n", 1, $LOG);
			}
			die;
		}
		$pstats{$_} = sprintf("%0.2f", 100*$stats{$_}/$stats{TOTAL}) foreach qw/ TOTAL TRIMMED TRIMLOST /;
		
		chomp(my @trimh = split /\n/, `cat $F{trimmed}{HISTO}`);
		foreach (@trimh) {
			my ($len, $N) = split;
			$trimlens{$len} = $N;
		}
    }
}

















