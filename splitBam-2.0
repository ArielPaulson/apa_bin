#!/usr/bin/perl
use strict;

## Splits a BAM file by strand -> W.bam, C.bam  --- OR BY END ---
## '--edit' argument is for Illumina stranded or other protocols requiring Tophat's '--library-type fr-firststrand' argument
##   edited BAM files will get the strand bit switched, because Tophat (currently: 2.0.4) doesn't do it for you.
## '--switch', unlike '--edit', will not edit the bitflag, but will send "C" strand reads to the "W" bam and vice versa.

### NEEDS: IGV-style split-by-first-end-strand mode

my ($switch, $edit, $end, $PE, $mem, $cores, $WC, @bams);
foreach (@ARGV) {
    if ($_ eq '--switch') {
		$switch = 1;
    } elsif ($_ eq '--edit') {
		$edit = 1;
    } elsif ($_ eq '--end') {
		$end = 1;
    } elsif ($_ eq '--PE') {
		$PE = 1;
    } elsif ($_ eq '--WC') {
		$WC = 1;
    } elsif (/^--mem=(.*)$/) {
		$mem = $1;  # for 'samtools sort'
    } elsif (/^--cores=(.*)$/) {
		$cores = $1;  # for 'samtools sort'
    } elsif (/^--/) {
		print "Unrecognized parameter '$_'!  Ignoring.\n";
    } else {
		push @bams, $_;
    }
}
$PE = 1 if $end;  # obviously, cannot split bam by end if single-end
$switch = 1 if $edit;  # editing implies switching
$mem = '1G' unless $mem;
$cores = 1 unless $cores;


## Strand naming
my $pos = $WC ? 'W' : 'plus';
my $neg = $WC ? 'C' : 'minus';


## Process each BAM input and return 2 bams: $file.$pos.bam and $file.$neg.bam (or $file.End1.bam and $file.End2.bam if splitting by end)
foreach my $bam (@bams) {
    
    (my $name = $bam) =~ s/.bam$//;
    my ($dropped);
    
    if (-e $bam) {
		
		print "Processing $bam: ",`date`;
		
		if ($PE) {
			
			## paired-end data
			
			if ($end) {   # split by end, not strand
				
				system "samtools view -hb -f 64 $bam > $name.End1.bam";
				system "samtools view -hb -f 128 $bam > $name.End2.bam";
				system "samtools index $name.End1.bam";
				system "samtools index $name.End2.bam";
				
			} else {
				
				if ($switch) {
					
					if ($edit) {
						
						## Switch strands, the hard way
						
						print "Splitting and re-stranding $bam...\n";
						open my $IN, '-|', "samtools view -h $bam";
						open my $POS, '|-', "samtools view -bS - > $name.$pos.bam";
						open my $NEG, '|-', "samtools view -bS - > $name.$neg.bam";
						while (<$IN>) {
							if (/^@/) {   # header lines
								print $NEG $_;
								print $POS $_;
							} else {   # alignment lines
								my @data = split /\t/, $_;
								my $str = $data[1] & 16 ? -1 : 1;
								my $end = $data[1] & 64 ? 1 : $data[1] & 128 ? 2 : 0;
								if ($end == 1 && $str == 1) {
									## First end (+) strand > (-) sam
									$data[1] += 16;  # NOW THIS IS - STRAND
									print $NEG join "\t", @data;
								} elsif ($end == 1 && $str == -1) {
									## First end (-) strand > (+) sam
									$data[1] -= 16;  # NOW THIS IS + STRAND
									print $POS join "\t", @data;
								} elsif ($end == 2 && $str == 1) {
									## Second end (+) strand > (+) sam
									$data[1] += 16;  # NOW THIS IS - STRAND (but going to + strand bam, since PE data is stranded by the strand of the first end)
									print $POS join "\t", @data;
								} elsif ($end == 2 && $str == -1) {
									## Second end (-) strand > (-) sam
									$data[1] -= 16;  # NOW THIS IS + STRAND (but going to - strand bam, since PE data is stranded by the strand of the first end)
									print $NEG join "\t", @data;
								} else {
									## No end or no strand?
									$dropped++;
									print "$bam | Line $. | $data[0] | End $end | Strand $str | Cannot classify!  Dropping.\n"; 
								}
							}
						}
						close $_ foreach ($IN, $POS, $NEG);
						
					} else {
						
						## Switch strands, the fast way
						
						## PE data must treat strand differently depending on what end the read is
						
## IGNORE THIS -- TAKES TOO MUCH TIME					
#						my $cmd = "samtools view -H $bam > $name.$pos.sam  ## Initialize SAM";
#						print "$cmd\n"; system $cmd;
#						my $cmd = "samtools view -H $bam > $name.$neg.sam  ## Initialize SAM";
#						print "$cmd\n"; system $cmd;
#						
#						my $cmd = "samtools view -f 64 -F 16 $bam >> $name.$neg.sam  ## First end (+) strand > (-) sam";
#						print "$cmd\n"; system $cmd;
#						my $cmd = "samtools view -f 64 -f 16 $bam >> $name.$pos.sam  ## First end (-) strand > (+) sam";
#						print "$cmd\n"; system $cmd;
#						
#						my $cmd = "samtools view -f 128 -F 16 $bam >> $name.$pos.sam  ## Second end (+) strand > (+) sam";
#						print "$cmd\n"; system $cmd;
#						my $cmd = "samtools view -f 128 -f 16 $bam >> $name.$neg.sam  ## Second end (-) strand > (-) sam";
#						print "$cmd\n"; system $cmd;
#						
#						## SAM -> BAM
#						my $cmd = "samtools view -h -bS $name.$pos.sam | samtools sort -@ $cores -m $mem -o $name.$pos.bam -";
#						print "$cmd\n"; system $cmd;
#						my $cmd = "samtools view -h -bS $name.$neg.sam | samtools sort -@ $cores -m $mem -o $name.$neg.bam -";
#						print "$cmd\n"; system $cmd;
						
						open my $POS, '|-', "samtools view -bS - > $name.$pos.bam";
						open my $NEG, '|-', "samtools view -bS - > $name.$neg.bam";
						open my $IN, '-|', "samtools view -h $bam";
						while (<$IN>) {
							if (/^\@/) {
								print $POS $_;
								print $NEG $_;
							} else {
								my $flags = (split /\t/, $_, 3)[1];
								my $end = $flags & 128 ? 2 : 1;
								my $dir = $flags & 16 ? -1 : 1;
								if ($end == 1 & $dir == 1) {
									print $NEG $_;   # First end (+) strand > (-) sam
								} elsif ($end == 1 && $dir == -1) {
									print $POS $_;   # First end (-) strand > (+) sam
								} elsif ($end == 2 && $dir == 1) {
									print $POS $_;   # Second end (+) strand > (+) sam
								} elsif ($end == 2 && $dir == -1) {
									print $NEG $_;   # Second end (-) strand > (-) sam
								} else {
									die "Data not paired-end: either cmd line was inappropriate or BAM has mixed data! ($., $flags, $end, $dir)\n";
								}
							}
						}
						close $_ foreach ($POS, $NEG, $IN);
					}
					
				} else {
					
					## Preserve strands
					
					## PE data must treat strand differently depending on what end the read is

## IGNORE THIS -- TAKES TOO MUCH TIME					
#					my $cmd = "samtools view -H $bam > $name.$pos.sam  ## Initialize SAM";
#					print "$cmd\n"; system $cmd;
#					my $cmd = "samtools view -H $bam > $name.$neg.sam  ## Initialize SAM";
#					print "$cmd\n"; system $cmd;
#					
#					my $cmd = "samtools view -f 64 -F 16 $bam >> $name.$pos.sam  ## First end (+) strand > (+) sam";
#					print "$cmd\n"; system $cmd;
#					my $cmd = "samtools view -f 64 -f 16 $bam >> $name.$neg.sam  ## First end (-) strand > (-) sam";
#					print "$cmd\n"; system $cmd;
#					
#					my $cmd = "samtools view -f 128 -F 16 $bam >> $name.$neg.sam  ## Second end (+) strand > (-) sam";
#					print "$cmd\n"; system $cmd;
#					my $cmd = "samtools view -f 128 -f 16 $bam >> $name.$pos.sam  ## Second end (-) strand > (+) sam";
#					print "$cmd\n"; system $cmd;
#					
#					## SAM -> BAM
#					my $cmd = "samtools view -h -bS $name.$pos.sam | samtools sort -@ $cores -m $mem -o $name.$pos.bam -";
#					print "$cmd\n"; system $cmd;
#					my $cmd = "samtools view -h -bS $name.$neg.sam | samtools sort -@ $cores -m $mem -o $name.$neg.bam -";
#					print "$cmd\n"; system $cmd;
					
					open my $POS, '|-', "samtools view -bS - > $name.$pos.bam";
					open my $NEG, '|-', "samtools view -bS - > $name.$neg.bam";
					open my $IN, '-|', "samtools view -h $bam";
					while (<$IN>) {
						if (/^\@/) {
							print $POS $_;
							print $NEG $_;
						} else {
							my $flags = (split /\t/, $_, 3)[1];
							my $end = $flags & 128 ? 2 : 1;
							my $dir = $flags & 16 ? -1 : 1;
							if ($end == 1 && $dir == 1) {
								print $POS $_;   # First end (+) strand > (-) sam
							} elsif ($end == 1 && $dir == -1) {
								print $NEG $_;   # First end (-) strand > (+) sam
							} elsif ($end == 2 && $dir == 1) {
								print $NEG $_;   # Second end (+) strand > (+) sam
							} elsif ($end == 2 && $dir == -1) {
								print $POS $_;   # Second end (-) strand > (-) sam
							} else {
								die "Data not paired-end: either cmd line was inappropriate or BAM has mixed data! ($., $flags, $end, $dir)\n";
							}
						}
					}
					close $_ foreach ($POS, $NEG, $IN);
				}
				
			}
			
			
		} else {
			
			## single-end data
			
			if ($switch) {
				
				if ($edit) {   # the hard way...
					
					print "Splitting and re-stranding $bam...\n";
					open my $IN, '-|', "samtools view -h $bam";
					open my $POS, '|-', "samtools view -h -bS - > $name.$pos.bam";
					open my $NEG, '|-', "samtools view -h -bS - > $name.$neg.bam";
					while (<$IN>) {
						if ($_ =~ /^@/) {   # header lines
							print $NEG $_;
							print $POS $_;
						} else {   # alignment lines
							my @data = split /\t/, $_;
							if ($data[1] & 16) {
								$data[1] -= 16;  # NOW THIS IS + STRAND
								print $POS join "\t", @data;
							} else {
								$data[1] += 16;  # NOW THIS IS - STRAND
								print $NEG join "\t", @data;
							}
						}
					}
					close $_ foreach ($IN, $POS, $NEG);
					
				} else {   # the fast way...
					
					my $cmd = "samtools view -hb -f 16 $bam > $name.$pos.bam";
					print "$cmd\n"; system $cmd;
					my $cmd = "samtools view -hb -F 16 $bam > $name.$neg.bam";
					print "$cmd\n"; system $cmd;

				}
				
			} else {
				
				my $cmd = "samtools view -hb -f 16 $bam > $name.$neg.bam";
				print "$cmd\n"; system $cmd;
				my $cmd = "samtools view -hb -F 16 $bam > $name.$pos.bam";
				print "$cmd\n"; system $cmd;
				
			}
			
		}
		
    }
    
    if ($end) {
		
		my $cmd = "samtools index $name.End1.bam";
		print "$cmd\n"; system $cmd;
		my $cmd = "samtools index $name.End2.bam";
		print "$cmd\n"; system $cmd;
		
    } else {
		
		my $cmd = "samtools index $name.$pos.bam";
		print "$cmd\n"; system $cmd;
		my $cmd = "samtools index $name.$neg.bam";
		print "$cmd\n"; system $cmd;
		
    }
    
}
exit;
