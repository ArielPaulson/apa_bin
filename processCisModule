#!/usr/bin/perl
use Getopt::Long;
use strict;

my ($cmoutput, $fasta, $writedir);
GetOptions("c=s" => \$cmoutput, "f=s" => \$fasta, "o=s" => \$writedir);

my ($cmname) = ($cmoutput =~ /([^\/]+)$/);
system "mkdir -p $writedir";
die "Failed to create write dir '$writedir'\n" unless -d $writedir;

open IN, $fasta or die "Cannot read fasta file '$fasta': $!\n";
my ($header, @headers, %faseq, %falen, $maxlen);
while (<IN>) {
    $_ =~ s/[\n\r]+$//;
    if ($_ =~ /^>(.*)/) {
	$header = $1;
	push @headers, $header;
    } else {
	$faseq{$header} .= $_;
    }
}
close IN;

foreach (keys %faseq) {
    $falen{$_} = length($faseq{$_});
    $maxlen = $falen{$_} if $falen{$_} > $maxlen;
}

my ($block, %bed, %bed2, %patt, %combo, %mdat, %pwm, $motif);
open IN, $cmoutput or die "Cannot read file CisModule output file '$cmoutput': $!\n";
print "Reading $cmoutput...\n";
while (<IN>) {
    $_ =~ s/[\n\r]+$//;
    $block++ if ($_ && $_ !~ /[^*]/);  # all-asterisk lines
    if ($block == 1) {
	if ($_ =~ /^>(\S+)\s+\[([\d,]+)\]\s+([\d\(\)+-]+)/) {
	    my ($header, $win, $module) = ($1, $2, $3);
	    $win =~ s/,/-/;
	    my (@pattern, %cpattern);
	    while ($module =~ /([+-])(\d+)\((\d+)\)/g) {
		push @{ $bed{$header}{$win} }, [$2, $3, $1];  # motif, start, strand
#		print "$header, $win: $2, $3, $1\n";
		push @pattern, $2;
		$cpattern{$2}++;
	    }
	    my $pattern = join ',', @pattern;
	    $patt{$pattern}{S}{$header}++;
	    $patt{$pattern}{T}++;
	    my $combination = join ',', sort {$a <=> $b} keys %cpattern;
	    $combo{$combination}{S}{$header}++;
	    $combo{$combination}{T}++;
	}
    } elsif ($block > 1) {
	if ($_ =~ /^Motif_(\d+)/) {
	    $motif = $1;
	} elsif ($_ =~ /^number of sites: (\d+)/) {
	    $mdat{$motif}{SITES} = $1;
	} elsif ($_ =~ /^(\d+)\t([\d.]+)\t([\d.]+)\t([\d.]+)\t([\d.]+)\t[ACGT]/) {
	    $mdat{$motif}{PWM}{$1} = [$2, $3, $4, $5];
	    $mdat{$motif}{WIDTH} = $1;  # stops at true width
	}
    }
}
close IN;
my $maxmot = (sort {$b <=> $a} keys %mdat)[0];

print "Writing patterns...\n";
open OUT, "> $writedir/$cmname.patterns.txt";
print OUT "Pattern\tInstances\tSequences\tSequence Names\n";
foreach my $combination (sort keys %combo) {
    my $nseq = scalar keys %{ $combo{$combination}{S} };
    my $allseq = join ', ', sort {$a <=> $b}  keys %{ $combo{$combination}{S} };
    print OUT "COMBO:$combination\t$combo{$combination}{T}\t$nseq\t$allseq\n";
}
foreach my $pattern (sort keys %patt) {
    my $nseq = scalar keys %{ $patt{$pattern}{S} };
    my $allseq = join ', ', sort {$a <=> $b}  keys %{ $patt{$pattern}{S} };
    print OUT "$pattern\t$patt{$pattern}{T}\t$nseq\t$allseq\n";
}
close OUT;

print "Writing bed...\n";
open OUT, "> $writedir/$cmname.bed";
foreach my $header (sort keys %bed) {
    my (@lines, $w);
    next unless $bed{$header};
    foreach my $win (keys %{ $bed{$header} }) {
	$w++;
	foreach (@{ $bed{$header}{$win} }) {
	    my ($motif, $start, $strand) = @$_;
	    my $end = $start + $mdat{$motif}{WIDTH} - 1;
	    $bed2{$header}{"$start\t$end\t$strand\t$motif"} = 1;
	    $start--;  # bed = 0-based
	    push @lines, "$start\t$end\t$motif\t$w\t$strand";
	}
    }
    print OUT "$header\t$_\n" foreach sort {$a <=> $b} @lines;
}
close OUT;

print "Writing minimal meme...\n";
open OUT, "> $writedir/$cmname.meme";
print OUT "MEME version 4\nALPHABET= ACGT\nstrands= +-\n";
print OUT "\nBackground letter frequencies (from uniform background):\nA 0.25000 C 0.25000 G 0.25000 T 0.25000\n";
foreach my $motif (sort {$a <=> $b} keys %mdat) {
    print OUT "\nMOTIF $motif\nletter-probability matrix: alength= 4 w= $mdat{$motif}{WIDTH} nsites= $mdat{$motif}{SITES} E= 0\n";
    printf OUT "  %0.6f\t  %0.6f\t  %0.6f\t  %0.6f\t\n", @{ $mdat{$motif}{PWM}{$_} } foreach (1..$mdat{$motif}{WIDTH});
}
close OUT;

print "Compiling Block Diagrams...\n";

my @colors = qw/ aqua blue red fuchsia yellow lime teal #444444 green silver purple olive navy maroon white   aqua blue red fuchsia yellow lime teal #444444 green silver purple olive navy maroon white /;
my @borders = ( (map {'solid black'} (1..15)), (map {'dashed white'} (1..14)), 'dashed grey' );

my $motif_blocks; 
foreach my $i (1..$maxmot) {
    $motif_blocks .= "<table style=\"display:inline-block; padding:5px;\"><tr>\n"
    . "<td><div style=\"width: 20px; height: 20px; background-color:".$colors[$i-1]."; border: 1px ".$borders[$i-1]."\"></div></td>\n"
    . "<td>Motif $i</td>\n"
    . "</tr></table>\n";
}

my $page = 
    "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n"
    . "<html>\n"
    . "<head>\n"
    . "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n"
    . "<title>MEME</title>\n"
    . "<style type=\"text/css\">\n"   # begin CSS block
    . "div.pad { padding-left: 30px; padding-top: 5px; padding-bottom: 10px;}\n"
    . "div.pad1 { margin: 10px 5px;}\n"
    . "div.pad2 { margin: 25px 5px 5px;}\n"
    . "div.pad3 { padding: 5px 0px 10px 30px;}\n"
    . "div.box { border: 2px solid #CCCCCC; padding:10px;}\n"
    . "div.bar { border-left: 7px solid #00666a; padding:5px; margin-top:25px; }\n"
    . "div.subsection {margin:25px 0px;}\n"
    . ".tic_major_top {position:absolute; border-left:2px solid blue; height:0.5em; top:0em;}\n"
    . ".tic_minor_top {position:absolute; border-left:1px solid blue; height:0.2em; top:0em;}\n"
    . ".tic_label_top {position:absolute; top:-1em;  height: 1em; text-align:center; vertical-align:middle}\n"
    . ".tic_major_bot {position:absolute; border-left:2px solid blue; height:0.5em; top:0em;}\n"
    . ".tic_minor_bot {position:absolute; border-left:1px solid blue; height:0.2em; top:0em;}\n"
    . ".tic_label_bot {position:absolute; top:0.5em;  height: 1em; text-align:center; vertical-align:middle}\n"
    . ".block_td {height:25px;}\n"
    . ".block_container {position:relative; width:98%; height:25px; padding:0px; margin: 0px 0px 0px 1em;}\n"
    . ".block_motif {position:absolute; z-index:3; height:12px; top:0px; text-align:center; vertical-align:middle; background-color:cyan;}\n"
    . ".block_rule {position:absolute; z-index:2; width:100%; height:1px; top:12px; left:0px; background-color:gray;}\n"
    . ".block_plus_sym {position:absolute; z-index:4; line-height:12px; top:0px; left:-1em;}\n"
    . ".block_minus_sym {position:absolute; z-index:4; line-height:12px; top:13px; left:-1em;}\n"
    . "</style>\n"  # end CSS block
    . "</head>\n"
    . "<body>\n"
    . "<div class=\"box\">\n"
    . "<h4>Combined Block Diagrams</h4>\n"
    . "<div class=\"pad\">\n"
    . "<div style=\"text-align:left\">\n"
    . $motif_blocks;


$page .= "</div>\n<BR><HR><BR>\n"
    . "<table id=\"tbl_blocks_combined\" style=\"width:100%;\" border=\"0\">\n"   # begin diagram block
    . "<col style=\"width:5em;\">\n"
    . "<col>\n"
    . "<thead><tr>\n"
    . "<th>Name</th>\n"
    . "<th>Motif Location<BR><BR></th>\n"  # <BR><BR> gives better spacing for top scale
    . "</tr></thead>\n"
    . "<tbody>\n";

$page .= &getscale(1);

foreach my $header (@headers) {
    $page .= &getline($header);
}

$page .= &getscale(0);
$page .= "</tbody>\n</table>\n<BR>$motif_blocks\n</html>\n";  # end diagram block and page

open OUT, "> $writedir/$cmname.block_diagrams.html";
print OUT $page;
close OUT;

print "Running Tomtom...\n";
system "tomtom_4.8.1 -oc $writedir/tomtom -min-overlap 4 -thresh 0.1 $writedir/$cmname.meme /n/facility/Genomics/CWS/Krumlauf/bony_dekumar/bdk14/apa_analysis/redo_from_scratch/transfac-2012.2.meme";

print "Complete!\n";
exit;



sub getscale {
    
    my $top = shift;   # 1=top, 0=bottom
    
    my $by = 20;  # percent per tic
    my $hundreds = int($maxlen/100);   # number of major tics
    my $remainder = int( ($maxlen-$hundreds*100)/$by );  # number of minor tics after last major
    my $total = $hundreds*5 + $remainder;  # total number of tics BEYOND THE ZERO TIC
    my @percents = map { sprintf("%0.3f",100*$by*$_/$maxlen) } (1..$total);
    
    my $scale = "<tr>\n<td>&nbsp;</td>\n<td class=\"block_td\" style=\"color: blue;\"><div class=\"block_container\">\n";
    if ($top) {
	$scale .= "<div class=\"tic_major_top\" style=\"left:0%\"><div class=\"tic_label_top\" style=\"left:-0.5em; width:1em;\">0</div></div>\n";
    } else {
	$scale .= "<div class=\"tic_major_bot\" style=\"left:0%\"><div class=\"tic_label_bot\" style=\"left:-0.5em; width:1em;\">0</div></div>\n";
    }
   
    my $j;
    foreach my $i (1..$total) {
	$j++;
	if ($j == 5) {  # hundreds tic
	    $j = 0;
	    if ($top) {
##		$scale .= "<div class=\"tic_label_top\" style=\"left:-1.5em; width:3em;\">".($i*$by)."</div><div class=\"tic_major_top\" style=\"left:".$percents[$i-1]."%\"></div>\n";
		$scale .= "<div class=\"tic_major_top\" style=\"left:".$percents[$i-1]."%\"><div class=\"tic_label_top\" style=\"left:-1.6em; width:3em;\">".($i*$by)."</div></div>\n";
	    } else {
		$scale .= "<div class=\"tic_major_bot\" style=\"left:".$percents[$i-1]."%\"><div class=\"tic_label_bot\" style=\"left:-1.5em; width:3em;\">".($i*$by)."</div></div>\n";
	    }
	} else {
	    if ($top) {
#		$scale .= "<div class=\"tic_label_top\" style=\"left:0em; width:1em;\">&nbsp;<div class=\"tic_minor_top\" style=\"left:".$percents[$i-1]."%;\"></div>\n";
		$scale .= "<div class=\"tic_minor_top\" style=\"left:".$percents[$i-1]."%;\"></div>\n";
	    } else {
		$scale .= "<div class=\"tic_minor_bot\" style=\"left:".$percents[$i-1]."%;\"></div>\n";
	    }
	}
    }
    
    $scale .= "</div></td>\n</tr>\n";
    return $scale;
}


sub getline {
    
    my $header = shift;
    
    my $len = $falen{$header};
    my $lpct = sprintf("%0.6f", 100*$len/$maxlen);
    my $line = "<tr>\n<td>$header</td>\n<td class=\"block_td\"><div class=\"block_container\">\n<div class=\"block_rule\" style=\"width:".$lpct."%\"></div>\n";
    $line .= "<div class=\"block_plus_sym\">+</div>\n<div class=\"block_minus_sym\">-</div>\n";
 
    foreach my $coord (sort {$a <=> $b} keys %{ $bed2{$header} }) {
	my ($start, $end, $strand, $motif) = split /\t/, $coord;
	my $spct = sprintf("%0.6f", 100*$start/$maxlen);
	my $wpct = sprintf("%0.6f", 100*($end-$start+1)/$maxlen);
	my $height = 10;  # pixels; in MEME height is proportionate to significance
	## NOTE: If - strand, top = 12px, height varies.  If + strand, require top < 11 and top + height = 11px.
	my $top = $strand eq '+' ? 1 : 12;
	$line .= "<div class=\"block_motif\" style=\"left:$spct%; top:${top}px; width:$wpct%; height:${height}px; background-color:".$colors[$motif-1]."; border: 1px ".$borders[$motif-1].";\" title=\"Motif $motif    starts: $start    ends: $end    \"></div>\n";
	# original title, e.g.: title=\"Motif 23    p-value: 4.76e-05    starts: 7    ends: 46    \";
    }
    
    $line .= "</div></td>\n</tr>\n";
    return $line;
}
