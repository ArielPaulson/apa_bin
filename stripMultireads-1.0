#!/usr/bin/env perl
use strict;

my $tmp = "stripMultireads.$$";
system "mkdir $tmp";
die unless -d $tmp;
my $sam = "$tmp/sam";
my $fsam = "$tmp/fsam";
my $fbam = "$tmp/fbam";
my $fbam2 = "$tmp/fbam2";
my $idx = "$tmp/idx";

my ($mode, $dedup, $aligner, $PE, $bowtie1, $bowtie2, $tophat, $bwa, $bwax, $star, $shortstack, $sort, $index, $staysam, @bams);
foreach (@ARGV) {
    if ($_ =~ /^--mode(\d)/) {
        $mode = $1;   
        # $1 is run-mode may be: 
        # 1 = bam contains multiple alignments per read (Tophat), or 
        # 2 = bam contains multireads but only one alignment for each (determine multiread status via tags)
    } elsif ($_ =~ /^--PE/) {
        $PE = 1;   # paired-end -- only works in mode 1
    } elsif ($_ =~ /^--dedup/) {
        $dedup = 1;
    } elsif ($_ =~ /^--sort/) {
        $sort = 1;
    } elsif ($_ =~ /^--index/) {
        $index = 1;
    } elsif ($_ =~ /^--sam/) {
        $staysam = 1;
    } elsif ($_ =~ /^--(bowtie[12]|tophat|bwa|bwax|star|shortstack)/) {
        $aligner = 1;
        $bowtie1 = 1 if $1 eq 'bowtie1';
        $bowtie2 = 1 if $1 eq 'bowtie2';
        $tophat = 1 if $1 eq 'tophat';
        $bwa = 1 if $1 eq 'bwa';
        $bwax = 1 if $1 eq 'bwax';  # later versions of BWA (e.g. 0.7.15-r1140) that put XS tags on every read
        $star = 1 if $1 eq 'star';
        $shortstack = $1 if $1 eq 'shortstack';
    } else {
        push @bams, $_;
    }
}

die "$0: No mode was specified!\n" unless $mode;
die "$0: Bowtie1 mode not available yet!\n" if $bowtie1;
die "$0: Cannot use mode 2 unless an aligner was specified!\n" if $mode == 2 && !$aligner;

foreach my $bam (@bams) {
    
    system "rm -f $tmp/*";
    (my $tmpbam = $bam) =~ s/bam$/stripMultireads.tmp.bam/i;
    (my $newbam = $bam) =~ s/bam$/stripMultireads.bam/i;
    print "Processing $bam...\n";
    my $now = `date`;
    print "  BAM -> SAM: $now";
    system(("bash","-c","samtools view -h $bam > $sam"));
    my (%filter, $pass);
    my $alignments = my $removed = my $retained = 0;
    
    if ($mode == 1) {
        
        my $now = `date`;
        print "  Extracting indexes: $now";
        if (open IN, $sam) {
            while (<IN>) {
                next if $_ =~ /^@/;   # DO NOT filter the header lines
                $alignments++;
                my ($idx, $flag) = (split /\t/, $_, 3)[0,1];
                #my $dir = $flag & 16;  # 0 or 1
                #$filter{$idx}{$dir}++;
                if ($PE) {
                    my $end = $flag & 64 ? 1 : $flag & 128 ? 2 : 0;
                    $filter{$idx}{$end}++;
                } else {
                    $filter{$idx}++;
                }
            }
            close IN;
            if (open IN, $sam) {
                my $now = `date`;
                print "  Filtering for multireads: $now";
                if (open OUT, "> $fsam") {
                    $pass = 1;
                    while (<IN>) {
                        my ($idx, $flag) = (split /\t/, $_, 3)[0,1];
                        #my $dir = $flag & 16;  # 0 or 1
                        #if ($filter{$idx}{$dir} > 1) {
                        if ($PE) {
                            my $end = $flag & 64 ? 1 : $flag & 128 ? 2 : 0;
                            if ($filter{$idx}{$end} > 1) {
                                $removed++;
                            } else {
                                $retained++ unless $_ =~ /^@/;
                                print OUT $_;   # should allow header lines to pass
                            }
                        } elsif ($filter{$idx} > 1) {
                            $removed++;
                        } else {
                            $retained++ unless $_ =~ /^@/;
                            print OUT $_;   # should allow header lines to pass
                        }
                    }
                    close IN;
                    close OUT;
                } else {
                    print "  Failed to open sam file '$sam'!\n";
                }
            } else {
                print "  Failed to open sam file '$sam'!\n";
            }
        } else {
            print "  Cannot read from index temp file 1 '$idx': $!\n";
        }
        
    } elsif ($mode == 2) {
        
        if (open IN, $sam) {
            if (open OUT, "> $fsam") {
                my $now = `date`;
                print "  Filtering for multireads: $now";
                $pass = 1;
                if ($bowtie2||$bwa) {
                    my $good = my $bad = my $subpe = my $unq = 0;
                    while (<IN>) {
                        ## OLD CODE
                        ## if ($_ =~ /\tAS:i:([-\d]+)\tXS:i:([-\d]+)/) {   # should allow header lines to pass
                        ## if ($1-$2 <= 1) {  # best secondary align is as good as (or 1 less than) primary
                        ##     if ($1==$2) {      # best secondary align as good as primary
                        ##         $removed++;
                        ##         $bad++;
                        ##     } elsif ($2 > $1) {  # likely from paired-end, where a better single-end align exists for an optimal-pair align
                        ##         $retained++;
                        ##         $subpe++;
                        ##         print OUT $_;
                        ##     } else {
                        ##         $retained++;
                        ##         $good++;
                        ##         print OUT $_;
                        ##     }
                        ## } else {
                        ##     unless ($_ =~ /^@/) {
                        ##         $retained++;
                        ##         $unq++;
                        ##     }
                        ##     print OUT $_;
                        ## }
                        if (/^@/) {
                            print OUT $_;
                        } else {
                            $alignments++;
                            if ($_ =~ /\tXS:i:/) {   # basically, this means multiread, regardless of AS-XS value difference
                                $removed++;
                            } else {
                                $retained++;
                                print OUT $_;
                            }
                        }
                    }
                } elsif ($bwax) {
                    ## Newer versions of BWA put XS tags on all reads
                    ## Here, the approach is to take reads with MAPQ == 0 and ask what the AS/XS spread is
                    ## It can go negative for paired reads.  Spreads with abs value < 10 are considered multireads BY THIS SCRIPT.
                    my $good = my $bad = my $subpe = my $unq = 0;  # could be capturing these, but not
                    while (<IN>) {
                        if (/^@/) {
                            print OUT $_;
                        } else {
                            my @data = split /\t/, $_, 6;
                            $alignments++;
                            if ($data[4] == 0) {
                                my ($AS, $XS) = ($_ =~ /\tAS:i:([-\d]+)\tXS:i:([-\d]+)/);
                                if (abs($XS-$AS) < 10) {
                                    $retained++;
                                    print OUT $_;
                                } else {
                                    $removed++;
                                }
                            } else {
                                $retained++;
                                print OUT $_;
                            }
                        }
                    }
                } elsif ($tophat||$star) {
                    while (<IN>) {
                        $alignments++ unless $_ =~ /^@/;
                        if ($_ =~ /\tNH:i:(\d+)/) {   # should allow header lines to pass
                            if ($1 > 1) {
                                $removed++;
                            } else {
                                $retained++;
                                print OUT $_;
                            }
                        } else {
                            $retained++ unless $_ =~ /^@/;
                            print OUT $_;
                        }
                    }
                } elsif ($shortstack) {
                    while (<IN>) {
                        $alignments++ unless $_ =~ /^@/;
                        if ($_ =~ /\tXY:Z:[RP]/) {   # should allow header lines to pass
                            $removed++;
                        } else {
                            $retained++;
                            print OUT $_;
                        }
                    }
                }
                close IN;
                close OUT;
            } else {
                print "  Failed to open sam file '$sam'!\n";
            }
        } else {
            print "  Failed to open sam file '$sam'!\n";
        }
        
    } else {
        
        die "Run mode $mode not supported!  Use 1|2\n";
        
    }
    
    print " $alignments alignments | $removed removed | $retained retained\n";
    
    if ($pass) {
        my $now = `date`;
        print "  SAM -> BAM: $now";
        if ($sort) {
            system(("bash","-c","samtools view -bS $fsam > $fbam"));
            system(("bash","-c","samtools sort -o $fbam2 $fbam"));
        } else {
            system(("bash","-c","samtools view -bS $fsam > $fbam2"));
        }
        if ($dedup) {
            my $now = `date`;
            print "  samtools rmdup: $now";
            system(("bash","-c","samtools rmdup -s $fbam2 $newbam"));
        } else {
            system(("bash","-c","mv $fbam2 $newbam"));
        }
        system(("bash","-c","samtools index $newbam")) if $index;
        print "  Wrote $newbam\n";
    }
}

system "rm -Rf $tmp";
my $now = `date`;
print "Complete: $now";
kill $$;
