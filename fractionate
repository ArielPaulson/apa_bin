#!/usr/bin/env perl
use strict;
use Cwd;

# This script 'fractionates' and annotates all exons in a cufflinks denovo gtf file into various classes: known-exonic, known-intronic, known-cisNAT, and unknown (intergenic)
# INPUTS: a config file describing: 1. cufflinks denovo output directories, 2. annotation datasets.
# OUTPUTS: a lot of files, most importantly 'assigned_transcripts.txt'.  All files are written to the respective cufflinks directory (**** so you need write access there ****).

## CONFIG FILE FORMAT:
# Tab-delimited. There are 4 line types: one for samples, one for gene annotations, one for intergenic annotations, and one for the chrom.sizes file.  They may appear in any order.
# Sample line format: 
#   4 fields, first 3 mandatory: 1. 'SAMPLE', 2. Sample ID (no spaces), 3. Path to cufflinks run directory, 4. Symbol indicating strand, if run was strand-specific.
#   2 notes on strandedness: It is expected that with strand-specific data, you have split the BAM file, and run cufflinks separately for + and - strand BAMs.  Legal strand symbols are: { W w C c 1 -1 + - }.
# Gene annotation line format:
#   5 fields, all mandatory: 1. 'ANNOT', 2. Annotation rank (integer), 3. Annotation label (no spaces), 4. Exons-only GTF file, 5. Genes-only BED file
# Intergenic annotations line format:
#   2 fields, all mandatory: 1. 'INTER', 2. comma-delim list of annotation ranks (above) to use for defining/annotating intergenic regions.
# Chrom.sizes line format:
#   2 fields, all mandatory: 1. 'CHRSIZE', 2. UCSC chrom.sizes or genome fa.fai file
# 
# 
# SAMPLE CONFIG FILE, NOT STRANDED:
# 
# SAMPLE   24A      /path/to/cufflinks/24A
# SAMPLE   24B      /path/to/cufflinks/24B
# ANNOT    1        Ensembl  /path/to/annots/Ensembl.exons.gtf  /path/to/annots/Ensembl.genes.bed
# ANNOT    2        Noncode  /path/to/annots/Noncode.exons.gtf  /path/to/annots/Noncode.genes.bed
# ANNOT    3        cDNA     /path/to/annots/cDNA.exons.gtf     /path/to/annots/cDNA.genes.bed
# INTER    1,2
# CHRSIZE  /path/to/chrom.sizes
# 
# 
# SAMPLE CONFIG FILE, STRANDED:
# 
# SAMPLE   24A.W    /path/to/cufflinks/24A/novelW       W
# SAMPLE   24A.C    /path/to/cufflinks/24A/novelC       C
# SAMPLE   24B.W    /path/to/cufflinks/24B/novelW       W
# SAMPLE   24B.C    /path/to/cufflinks/24B/novelC       C
# ANNOT    1        Ensembl  /path/to/annots/Ensembl.exons.gtf  /path/to/annots/Ensembl.genes.bed
# ANNOT    2        Noncode  /path/to/annots/Noncode.exons.gtf  /path/to/annots/Noncode.genes.bed
# ANNOT    3        cDNA     /path/to/annots/cDNA.exons.gtf     /path/to/annots/cDNA.genes.bed
# INTER    1,2
# CHRSIZE  /path/to/chrom.sizes


### FUTURE: intergenic SAS pair detection for stranded samples


my $config = $ARGV[0];  # config file, specified above
my ($skip, $test);   # $skip = skip bedtools steps and go straight to summarization | $test = die after first sample

foreach (1..$#ARGV) {
    $skip = 1 if $ARGV[$_] eq '--skip';
    $test = 1 if $ARGV[$_] eq '--test';
}

my $base = cwd();
my %strconv = ( (map {($_=>1)} qw/ W w 1 + /), (map {($_=>2)} qw/ C c -1 - /) );
my ($Nrank, $chrsizes, $itgc_ann, %samples, %strands, %labels, %gtfs, %beds, %antis);


### Read in config file; create antisense data if necessary

open IN, $config or die "Cannot read '$config': $!\n";
print "Reading configuration...\n";
while (<IN>) {
    $_ =~ s/[\n\r]+$//;
    my @data = split /\t/, $_;
    if ($data[0] eq 'SAMPLE') {    # cufflinks directory entry
	my ($label, $dir) = @data[1,2];
	$dir = "$base/$dir" unless $dir =~ /^\//;   # ensure full path
	$samples{$label} = $dir;
	if ($data[3]) {     # strand information
	    die "Strand symbol '$data[3]' not recognized: must be one of: W,w,C,c,1,-1,+,-\n" unless $strconv{$data[3]};
	    $strands{$label} = $strconv{$data[3]};
	}
    } elsif ($data[0] eq 'ANNOT') {
	my ($field, $rank, $label, $gtf, $bed) = @data;
	$labels{$rank} = $label;
	$gtfs{$rank} = $gtf;
	$beds{$rank} = $bed;
	next unless %strands;
	my ($bedname) = ($bed =~ /([^\/]+)$/);
	my $anti = "$base/$bedname.antisense";  # so, writes to working dir and not $bed dir
	$antis{$rank} = $anti;
	if (-e $anti) {
	    print "Antisense dataset '$anti' exists.\n";
	} else {
	    print "Creating $anti...\n";   # make antisense bed if does not already exist
	    system "cp $bed $anti";
	    my $cmd = "/home/apa/local/bin/antisense $anti --drop";
	    print "$cmd\n"; system $cmd;
	}
    } elsif ($data[0] eq 'INTER') {
	$itgc_ann = $data[1];
    } elsif ($data[0] eq 'CHRSIZE') {
	$chrsizes = $data[1];
    } else {
	print "Unknown line type '$data[0]'!\n";
    }
}
close IN;


### Create intergenic annotations

my $Nrank = (sort {$b <=> $a} keys %labels)[0];
unless ($itgc_ann) {
    print "No 'INTER' lines found in config file!  Using all annotations to define/annotate intergenes...\n";
    $itgc_ann = join ',', (1..$Nrank);
}
my $prefix = "intergenic_annots.$itgc_ann";
my @IA = map { "$base/$prefix.$_.bed" } qw/ ALL W C /;
my $exist = 1;
foreach (@IA) {
    (-e $_) ? (print "Intergenic annotation dataset '$_' exists\n") : ($exist = 0);
}
unless ($exist) {
    print "Creating intergenic annotations...\n";
    my @which = split /,/, $itgc_ann;
    foreach (@which) {
	die "Annotation set $_ does not exist!  Only $Nrank given.\n" if $_ > $Nrank;
    }
    my @merges = map { $beds{$_} } @which;
    my $cmd = "cat @merges | cut -f1-6 > merged.bed";
    print "$cmd\n"; system $cmd;
    unless (-e $IA[0]) {
	my $cmd = "/home/apa/local/bin/getIntergenes merged.bed $prefix.ALL.bed $chrsizes 2";
	print "$cmd\n"; system $cmd;
    }
    if (%strands) {
	unless (-e $IA[1]) {
	    my $cmd = "/home/apa/local/bin/getIntergenes merged.bed $prefix.W.bed $chrsizes 1";
	    print "$cmd\n"; system $cmd;
	}
	unless (-e $IA[2]) {
	    my $cmd = "/home/apa/local/bin/getIntergenes merged.bed $prefix.C.bed $chrsizes -1";
	    print "$cmd\n"; system $cmd;
	}
    }
    unlink 'merged.bed';
}

### Prepare for exon matching

my @ilabs;
my @types = qw/ strong weak intron /;
push @types, 'cisnat' if %strands;
foreach my $pass (1..$Nrank) {
    my $label = $labels{$pass};
    push @ilabs, map { "$label.$_" } @types;
}
push @ilabs, 'intergenic';
my $Nsets = $#ilabs;

foreach my $sample (keys %samples) {
    my $dir = $samples{$sample};
    next if -e "$dir/exons.gtf";
    ## Strip "transcript" lines from the gtf files
    die "$dir not a cufflinks directory: no 'transcripts.gtf'!\n" unless -e "$dir/transcripts.gtf";
    system "grep -P \"\texon\t\" $dir/transcripts.gtf > $dir/exons.gtf";
}


### Begin exon matching

foreach my $sample (keys %samples) {
    
    print "Fractionating $sample...\n";
    my $dir = $samples{$sample};
    my $str = $strands{$sample} ? '-s' : '';

    my @terminals;
    foreach my $pass (1..$Nrank) {
	my $gtf = $gtfs{$pass};
	my $bed = $beds{$pass};
	my $label = $labels{$pass};
	my $prev = $pass-1;
	my $basegtf = $pass == 1 ? 'exons.gtf' : "intergenic_$prev.gtf";   # start with exons.gtf; subsequent passes use the previous pass's 'intergenic' output
	
	push @terminals, "$dir/$label.exonic_strong.gtf";
	push @terminals, "$dir/$label.exonic_weak.gtf";
	push @terminals, "$dir/$label.intronic.gtf";
	push @terminals, "$dir/$label.cisnat.gtf" if %strands;
	next if $skip;

	print "$sample: $label: all exon hits\n";
	## ALL EXON HITS: Match novels strandwise to Ensembl exons (even if 1bp overlap...)
	system "intersectBed -u -wa $str -a $dir/$basegtf -b $gtf > $dir/$label.exonic_all.gtf";
	## ALL EXON HITS: Annotate
	system "intersectBed -wo $str -a $dir/$basegtf -b $gtf > $dir/$label.exonic_all.gtf_annotated";

	print "$sample: $label: strong exon hits\n";
	## STRONG EXON HITS: Match novels strandwise to Ensembl exons (require reciprocal 50% overlap)
	system "intersectBed -u -wa $str -f 0.5 -r -a $dir/$basegtf -b $gtf > $dir/$label.exonic_strong.gtf";
	## STRONG EXON HITS: Annotate
	system "intersectBed -wo $str -f 0.5 -r -a $dir/$basegtf -b $gtf > $dir/$label.exonic_strong.gtf_annotated";
	
	print "$sample: $label: weak exon hits\n";
	## WEAK EXON HITS: Subtract STRONG exon hits from all exon hits (lacking reciprocal 50% overlap)
	system "intersectBed -v -f 1 -r -wa $str -a $dir/$label.exonic_all.gtf -b $dir/$label.exonic_strong.gtf > $dir/$label.exonic_weak.gtf";
	## WEAK EXON HITS: Annotate
	system "intersectBed -wo $str -a $dir/$label.exonic_weak.gtf -b $gtf > $dir/$label.exonic_weak.gtf_annotated";
	
	print "$sample: $label: intron hits\n";
	## INTRON HITS: Match novels strandwise to loci, then subtract all known exon hits
	system "intersectBed -u -wa $str -a $dir/$basegtf -b $bed > $dir/$label.locus.gtf";
	system "intersectBed -v -f 1 -r -wa $str -a $dir/$label.locus.gtf -b $dir/$label.exonic_all.gtf > $dir/$label.intronic.gtf";
	## INTRON HITS: Annotate
	system "intersectBed -wo $str -a $dir/$label.intronic.gtf -b $bed > $dir/$label.intronic.gtf_annotated";
	sleep 1;  # for CTRL-Cing
	
	print "$sample: $label: all sense hits\n";
	## ALL SENSE HITS: Merge strong exon, weak exon, intronic
	system "cat $dir/$label.exonic_all.gtf $dir/$label.intronic.gtf > $dir/$label.sense_all.gtf";
	
	if (%strands) {
	    print "$sample: $label: antisense hits\n";
	    ## CIS-NAT HITS: Match novels strandwise to Ensembl cisnat loci, then subtract all sense locus hits
	    system "intersectBed -u -wa -s -a $dir/$basegtf -b $antis{$pass} > $dir/$label.antilocus.gtf";  # hardcode -s
	    system "intersectBed -v -f 1 -r -wa -s -a $dir/$label.antilocus.gtf -b $dir/$label.sense_all.gtf > $dir/$label.cisnat.gtf";  # hardcode -s
	    
	    print "$sample: $label: antisense annots\n";
	    ## CIS-NAT HITS: Annotate, but not-strandwise to sense loci
	    system "intersectBed -wo -a $dir/$label.cisnat.gtf -b $bed > $dir/$label.cisnat.gtf_annotated";
	    ## CIS-NAT HITS: Annotate with nearest same-strand neighbors
	    system "closestBed -d -s -a $dir/$label.cisnat.gtf -b $bed > $dir/$label.cisnat.gtf_NN_Str.bed_annotated";
	    ## ALL LOCUS HITS: Merge sense, cisnat hits
	    system "cat $dir/$label.sense_all.gtf $dir/$label.cisnat.gtf > $dir/$label.locus_all.gtf";
	} else {
	    ## ALL LOCUS HITS: Merge sense, cisnat hits
	    system "cat $dir/$label.sense_all.gtf > $dir/$label.locus_all.gtf";
	}
	
	print "$sample: $label: intergenics\n";
	## Subtract all models from novels -> first-pass intergenic exons
	system "intersectBed -v -f 1 -r -a $dir/$basegtf -b $dir/$label.locus_all.gtf > $dir/intergenic_$pass.gtf";
	sleep 1;  # for CTRL-Cing
    }
    
    my $intergenic = "intergenic_$Nrank.gtf";   # final intergenics file
    push @terminals, "$dir/$intergenic";
    
    unless ($skip) {
	print "$sample: final intergenics\n";
	## Get nearest same-strand neighbors for intergenic models -- not processed for annots; just produced if one should find it useful
	system "intersectBed -wao -a $dir/$intergenic -b $IA[$strands{$sample}] > $dir/${intergenic}_NN_Str.bed_annotated" if %strands;
	## Get nearest any neighbors for intergenic models
	system "intersectBed -wao -a $dir/$intergenic -b $IA[0] > $dir/${intergenic}_NN_Any.bed_annotated";
	sleep 1;  # for killing
	
	## still-unclassified exons
	my $class = "all_classified_exons.gtf";
	my $lost = "lost_exons.gtf";
	system "cat @terminals > $dir/$class";
	system "intersectBed -v -f 1 -r -a $dir/exons.gtf -b $dir/$class > $dir/$lost";
	sleep 1;  # for killing
    }
    
    ## Final tally -- have all exons been classified?
    my $IC = (split /\s+/, `wc -l $dir/exons.gtf`)[0];
    my $LC = (split /\s+/, `wc -l $dir/lost_exons.gtf`)[0];
    my $FC;
    $FC += (split /\s+/, `wc -l $_`)[0] foreach @terminals;
    print "$dir exons: $IC in | $FC classified | $LC lost\n";
    sleep 1;  # for killing
    
    
    ## read in annotated exon sets; assign to transcripts and prioritize; tabulate
    
    my (%xannot, %tdat);
    print "Tabularizing...\n";
    foreach my $i (0..$Nsets) {
	next unless $terminals[$i];  # sometimes get blank files?
	my $annot = $terminals[$i] =~ /intergenic/ ? $terminals[$i].'_NN_Any.bed_annotated' : $terminals[$i].'_annotated';
	print " $annot";
	$| = 1;
#chr1	Cufflinks	exon	183958813	183959023	1000	+	.	gene_id "CUFF.1148"; transcript_id "CUFF.1148.1"; exon_number "1"; FPKM "87.6808320377"; frac "1.000000"; conf_lo "42.402645"; conf_hi "132.959019"; cov "17.314720";	chr1	183957414	183959024	n424054	1000	-	183957414	183959024	0	1	1610,	0,	211
	open IN, $annot or die;
	while (<IN>) {
	    $_ =~ s/[\n\r]+$//;
	    my @data = split /\t/, $_;
	    my $coord = join "\t", @data[0,3,4,6];  # exon coords
	    $xannot{$coord}{TYPE} = $ilabs[$i];
	    if ($ilabs[$i] =~ /intron/ || $ilabs[$i] =~ /cisnat/) {   # bed-based annotations
		push @{ $xannot{$coord}{DATA} }, [(join ':', (@data[12,9..11,14], $data[-1])), $data[-1]];  # id chr start end strand, overlap
	    } elsif ($ilabs[$i] =~ /intergenic/) {   # double-bed-based annotations
		my ($start, $end, $astart, $aend) = @data[3,4,13,14];
		my ($neighb, $dist) = ($start-$aend>0) ? ('N5', $start-$aend) : ('N3', $astart-$end);
		push @{ $xannot{$coord}{DATA} }, [(join ':', (@data[15,12..14,17], $data[-1], $dist, $neighb)), $data[-1]];  # id chr start end strand overlap dist side, overlap
	    } else {   # gtf-based annotations
		my ($id) = ($data[17] =~ /^(?:gene|transcript)_id "(.*?)"/);
		print "$ilabs[$i]: $data[17]\n" unless $id;
		push @{ $xannot{$coord}{DATA} }, [(join ':', ($id, @data[9,12,13,15], $data[-1])), $data[-1]];  # id chr start end strand overlap, overlap
	    }
	}
	print "  |  $ilabs[$i]: $.\n";
	close IN;
    }
    
    my $yes = my $no = 0;
    print " Reading transcripts.gtf\n";
    open IN, "$dir/transcripts.gtf" or die;
    while (<IN>) {
	$_ =~ s/[\n\r]+$//;
	my @data = split /\t/, $_;
	my $coord = join "\t", @data[0,3,4,6];
	my ($gene, $trans) = ($data[8] =~ /gene_id "(.*?)"; transcript_id "(.*?)";/); 
	my ($fpkm) = ($data[8] =~ /FPKM "(.*?)";/); 
	if ($data[2] eq 'transcript') {
	    $tdat{$trans}{DATA} = "$gene\t$coord\t$fpkm";
	} elsif ($data[2] eq 'exon') {
#	    my ($nexon) = ($data[8] =~ /exon_number "(\d+)";/); 
	    $tdat{$trans}{EXONS}++;
	    $tdat{$trans}{LENGTH} += $data[4]-$data[3]+1;
	    $xannot{$coord} ? $yes++ : $no++;
	    next unless $xannot{$coord}{TYPE};   # assuming complete fractionation, this indicates a non-hiconf element (so ignore)
	    $tdat{$trans}{TYPES}{ $xannot{$coord}{TYPE} }++;  # num exons @ annot type
	    push @{ $tdat{$trans}{ANNOT}{ $xannot{$coord}{TYPE} } }, @{ $xannot{$coord}{DATA} };  # unique exon annot data
	}
    }
    close IN;
    
    foreach my $trans (keys %tdat) {
	$tdat{$trans}{TYPES}{$_} += 0 foreach @ilabs;  # ensure printable values
    }
    
    print "$yes yes | $no no\n";
    print " Writing assigned_transcripts.txt\n";
    open OUT, "> $dir/assigned_transcripts.txt";
    print OUT "Transcript\tChr\tStart\tEnd\tStrand\tFPKM\tLength\tNexons";
    print OUT "\t$_" foreach @ilabs;
    print OUT "\t$_.BP" foreach @ilabs;
    print OUT "\t$_.ANNOT" foreach @ilabs;
    print OUT "\n";
    foreach my $trans (keys %tdat) {
	print OUT "$tdat{$trans}{DATA}\t$tdat{$trans}{LENGTH}\t$tdat{$trans}{EXONS}";
	print OUT "\t$tdat{$trans}{TYPES}{$_}" foreach @ilabs;
	my (%bp, %annots);
	foreach my $i (0..$Nsets) {
	    if ($tdat{$trans}{ANNOT}{$ilabs[$i]}) {
#		print "  $trans | $ilabs[$i] | ", (scalar @{ $tdat{$trans}{ANNOT}{$ilabs[$i]} }), "\n";
		foreach my $entry (@{ $tdat{$trans}{ANNOT}{$ilabs[$i]} }) {
		    push @{ $annots{$i} }, $entry->[0];
		    $bp{$i} = $entry->[1] if $entry->[1] > $bp{$i};
		}
		$annots{$i} = join '; ', @{ $annots{$i} };   # convert array to delimited scalar
	    } else {
#		print "  $trans | $ilabs[$i] | 0\n";
		$bp{$i} = 0;
		$annots{$i} = '';
	    }
	}
	print OUT "\t$bp{$_}" foreach (0..$Nsets);
	print OUT "\t$annots{$_}" foreach (0..$Nsets);
	print OUT "\n";
    }
    die if $test;   # test mode: first sample only
    chdir '..';
}
exit;
