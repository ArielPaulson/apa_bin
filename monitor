#!/usr/bin/env perl
use Getopt::Long;
use strict;

my %daynames = (0,'Sun', 1,'Mon', 2,'Tue', 3,'Wed', 4,'Thu', 5,'Fri', 6,'Sat');
my %monthnames = (0,'Jan', 1,'Feb', 2,'Mar', 3,'Apr', 4,'May', 5,'Jun', 6,'Jul', 7,'Aug', 8,'Sep', 9,'Oct', 10,'Nov', 11,'Dec');
my @header = qw/ DATE PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND /;
my $format = "%-24s  %5s  %-8s  %2s  %2s  %5s  %4s  %4s  %1s  %5s  %4s  %8s  %-16s\n";
my ($iter, $redo, $pid, $name, $user, $interval, $logfile, @test);

GetOptions("p=i" => \$pid, "n=s" => \$name, "u=s" => \$user, "i=i" => \$interval, "l=s" => \$logfile);

die "Timing interval cannot be negative!\n" if $interval < 0;
unless ($interval) {
	print "No timing interval specified: using default of 60 seconds\n";
	$interval = 60;
}

if ($logfile) {
	unless (open LOG, "> $logfile") { 
		print "logfile '$logfile' could not be created: $!\n";
		$logfile = undef;
	}
} else {
	print "'-l logfile' not specified: print to STDOUT\n";
}

unless ($pid) {		# get PID
	@test = split /\n/, `top -n 1`;
	foreach my $i (7..$#test) {
		$test[$i] =~ s/^\D+//;		# strip leading fake whitespace
		my @chars = split //, $test[$i];
		my ($pid1, $user1, $name1) = (split /\s+/, $test[$i])[0,1,11];
		if ($name && $user) {
			$pid = $pid1 if ($name1 eq $name && $user1 eq $user);
		} elsif ($name) {
			$pid = $pid1 if $name1 eq $name;
		} else {
			die "Nothing to monitor!  Must specify '-p PID' or '-n processname' (+ optional '-u user')\n";
		}
	}
	if ($pid) {
		print "Found PID $pid\n";
	} else {
		my $pidfail = "No process matching name == '$name' ";	
		$pidfail .= "and user == '$user' " if $user;
		$pidfail .= "could be found!\n";	
		die $pidfail;
	}
}

{
	my @output = split /\n/, `top -b -p $pid -n 1`;
	$output[7] =~ s/^\D+//;		# strip leading fake whitespace
	my @top = split /\s+/, $output[7];
	if (@top) {		# PID live
		$iter++;
		$redo = 1;
		my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
		my $timestamp = "$daynames{$wday} $monthnames{$mon} ".sprintf("%02d %4d %02d:%02d:%02d", $mday,$year+1900,$hour,$min,$sec);	
		if ($logfile) {
			my $string = join "\t", ($timestamp, @top);
			print LOG (join "\t", @header), "\n" if $iter == 1;	# add header
			print LOG "$string\n";
		} else {
			printf ($format, @header) if $iter == 1;	# add header
			printf ($format, $timestamp, @top);
		}
	} else {		# PID gone
		if ($iter) {	# PID was found at least once
			exit;
		} else {	# PID was not found
			die "PID $pid not found!\n";
		}
	}
	sleep $interval;
	redo;
}
