#!/usr/bin/perl
use Getopt::Long;
use Pod::Usage;
use strict;

my $input;   # input bed file
my $output;  # output bed file
my $rename;  # clobber existing names?
my $overwrite; # overwrite input file?
my $stdio;   # read (and write) data on a pipe

my $N;  # number of non-header, non-comment lines in bed file
my @output1;  # BED lines to print (fields 1-3)
my @output2;  # BED lines to print (fields 5-N)

GetOptions("i=s" => \$input, "rename" => \$rename, "overwrite" => \$overwrite, "" => \$stdio);

my $IN;
if ($stdio) {
    open $IN, '-';
} else {
    open $IN, '<', $input or die "$0: Could not open bed file '$input' for reading: $!\n";
}
while (<$IN>) {
    next if ($_ =~ /^track/ || $_ =~ /^#/);
    $_ =~ s/[\n\r]+$//;
    my @data = split /\t/, $_;
    die "File '$input' already has IDs!\n" if ($data[3] && !$rename);
    push @output1, join("\t",@data[0..2]);
    push @output2, join("\t",@data[4..$#data]) if $#data > 3;
    $N++;
}
close $IN;

my $width = length($N);
my ($filename) = ($input =~ /([^\/]+)\.bed$/i);  # filename of bed file
$filename = $input unless $filename;  # regex failed? Take whole filename

my $OUT;
if ($stdio) {
    $OUT = *STDOUT;
} elsif ($overwrite) {
    unlink $input;
    open $OUT, '>', $input;
} else {
    $OUT = *STDOUT;
}
foreach my $i (1..$N) {
    my $j = $i-1;
    my $zeroes = 0 x ($width-length($i));
    print $OUT "$output1[$j]\t${filename}_$zeroes$i";
    print $OUT "\t$output2[$j]" if $output2[$j];
    print $OUT "\n";
}
exit;
