#!/usr/bin/env perl
require '/home/apa/apa_routines.pm';
use Getopt::Long;
use Pod::Usage;
use strict;


# TO DO: single/double unmapped handling, orphans handling, treat-PE-as-SE mode
#        also, complete that non-BAM file format handling

# Deps: samtools, (rm, gzip)
# Uses ONLY flag 128 (second-end), IGNORES flag 2 (properly paired)


## Inputs
my $fastq1;     # End 1 fastq to extract reads from
my $fastq2;     # End 2 fastq to extract reads from (OPTIONAL)
my $prefix;     # output fastq prefix
my $AIO;        # if paired-end: do not separate orphan pairs from full pairs; output one fq pair with everything
my $split;      # if paired-end: do not combine end-1-orphan pairs and end-2-orphan pairs into one fq pair; keep as separate pairs
my $as_single;  # if paired-end: write orphans as single reads, do not write read pairs
my $no_orphans; # if paired-end: do not write orphans (i.e. if one end aligned, treat as though both ends aligned)
my $nogzip;     # do not compress outputs
my $fasta;      # fastqs are actually fastas
my $type;       # alternate file type of @align_files, if not bam (must all be same format).  Can be: 'blast' (headerless -m 8 blast output), 'psl' (headered blat output), 'psl0' (headerless blat output)
my $aligned;    # write aligned reads to fastq, too.

GetOptions("fq1=s"=>\$fastq1, "fq2=s"=>\$fastq2, "p=s"=>\$prefix, "AIO"=>\$AIO, "split"=>\$split, "single"=>\$as_single, "no-gzip"=>\$nogzip, "no-orphans"=>\$no_orphans, "fasta"=>\$fasta, "aligned"=>\$aligned, "t=s"=>\$type);
my @align_files = @ARGV;   # SAM/BAM files of other alignments (from $fastq) to identify which reads were mapped
my $PE = $fastq2 ? 1 : 0;
die "$0: Must specify output file prefix!\n" unless $prefix;
die "$0: Fastq 1 '$fastq1' not found!!\n" unless -e $fastq1;  # must exist
die "$0: Fastq 2 '$fastq2' not found!!\n" if $fastq2 && ! -e $fastq2;  # must exist if specified
die "$0: Cannot combine --AIO, --split, or --single!\n" if $AIO + $split + $as_single > 1;
die "$0: Cannot use --AIO, --split, or --single with single-end data!\n" if $AIO + $split + $as_single >= 1 && !$PE;
my $default = $PE && $AIO + $split + $as_single + $no_orphans == 0 ? 1 : 0;  # default orphan handling, unless something else specified.


## Globals
my @ends;      # ends to process: (1) or (1,2) depending on input
my %headers;   # aligned headers from bam
my %counts;    # stats
my %fcounts;   # written record counts
my %files;     # output files
my %records;   # fastq records


## Filehandles etc.
## Some of the end assignments may seem backwards, but this is because we are extracting UNALIGNED READS NOT ALIGNED.
## E.g. if end 1 aligned, then the orphan is from end 2.
## The term 'orphan pairs' refers to an (unaligned) orphan read and its (aligned) mate.
my @orphfiles;  # filenames for orphans
my $ext = $fasta ? 'fasta' : 'fastq';
my $ext2 = $nogzip ? $ext : "$ext.gz";
$files{1}{IN} = $fastq1;
if ($PE) {
    @ends = (1,2);
    $files{2}{IN} = $fastq2;
    $files{1}{OUT} = "${prefix}_1.$ext2";                   ## End-1 reads for unaligned pairs (will also include End 1 reads for orphan pairs, if $AIO)
    $files{2}{OUT} = "${prefix}_2.$ext2";                   ## End-2 reads for unaligned pairs (will also include End 2 reads for orphan pairs, if $AIO)
    if ($split) {
        $files{1}{ORPH1} = "${prefix}_E1_orphans_1.$ext2";  ## End-1 reads for End-1 orphans (these reads did NOT align)
        $files{2}{ORPH1} = "${prefix}_E1_orphans_2.$ext2";  ## End-2 reads for End-1 orphans (these reads aligned)
        $files{1}{ORPH2} = "${prefix}_E2_orphans_1.$ext2";  ## End-1 reads for End-2 orphans (these reads aligned)
        $files{2}{ORPH2} = "${prefix}_E2_orphans_2.$ext2";  ## End-2 reads for End-2 orphans (these reads did NOT align)
        push @orphfiles, ($files{1}{ORPH1}, $files{2}{ORPH1}, $files{1}{ORPH2}, $files{2}{ORPH2});
    } elsif ($as_single) {
        $files{1}{ORPH}  = "${prefix}_E1_orphans.$ext2";    ## End-1 orphans (not writing pairs, so this is the End-1 read)
        $files{2}{ORPH}  = "${prefix}_E2_orphans.$ext2";    ## End-2 orphans (not writing pairs, so this is the End-2 read)
        push @orphfiles, ($files{1}{ORPH}, $files{2}{ORPH});
    } elsif ($default) {
        $files{1}{ORPH}  = "${prefix}_orphans_1.$ext2";     ## End-1 reads for ALL orphans
        $files{2}{ORPH}  = "${prefix}_orphans_2.$ext2";     ## End-2 reads for ALL orphans
        push @orphfiles, ($files{1}{ORPH}, $files{2}{ORPH});
    }
    if ($aligned) {
        $files{1}{ALN} = "${prefix}_aligned_1.$ext2";       ## End-1 reads for aligned pairs
        $files{2}{ALN} = "${prefix}_aligned_2.$ext2";       ## End-2 reads for aligned pairs
    }
} else {
    @ends = (1);
    $files{1}{OUT} = "$prefix.$ext2";
    $files{1}{ALN} = "${prefix}_aligned.$ext2" if $aligned;
}


## Ensure some printable values
$counts{$_} = 0 foreach qw/ HEADERS ALIGNS E1A E2A E1H E2H PAIRA PAIRU ORPH1 ORPH2 /;
$fcounts{1}{$_} = $fcounts{2}{$_} = 0 foreach qw/ OUT ORPH ORPH1 ORPH2  /;


## Screen alignment files
foreach my $aln (@align_files) {
    print STDERR "Reading '$aln': ",`date`;
    
    if ($type eq 'psl' || $type eq 'psl0') {
        ## BLAT
        my $cmd = $type eq 'psl0' ? "cut -f10 $aln" : "tail -n +6 $aln | cut -f10";
        open my $IN, '-|', $cmd;
        my $end = 1;                       ## NO ENDEDNESS (yet)
        while (<$IN>) {
            chomp;
            $headers{$_}{$end} = 1;
            $counts{"E${end}A"}++;         ## alignment counts, NOT read counts.  May have multireads.
        }
        close $IN;
    } elsif ($type eq 'blast') {
        ## BLAST
        open my $IN, '-|', "cut -f1 $aln";
        my $end = 1;                       ## NO ENDEDNESS (yet)
        while (<$IN>) {
            chomp;
            $headers{$_}{$end} = 1;
            $counts{"E${end}A"}++;         ## alignment counts, NOT read counts.  May have multireads.
        }
        close $IN;
    } else {
        ## SAM/BAM
        open my $IN, '-|', "samtools view -F 4 $aln | cut -f1-2";
        while (<$IN>) {
            chomp;
            my ($header, $flags) = split;
            my $end = $flags & 128 ? 2 : 1;
            $headers{$header}{$end} = 1;   ## NOT SCOPED TO BAM.  We only care if end aligned somewhere, NOT if pair was concordant.
            $counts{"E${end}A"}++;         ## alignment counts, NOT read counts.  May have multireads.
        }
        close $IN;
    }
    
}
$counts{ALIGNS} = $counts{E1A} + $counts{E2A};


## Filter fastq(s)
my (%ORPH, $ALN);
foreach my $e (@ends) {
    
    ## $e = THIS READ END = FASTQ BEING FILTERED
    ## THIS IS THE END WE ARE ON -- THIS IS THE ONLY END WE CAN WRITE READS FOR
    my %efiles = %{ $files{$e} };
    
    my $o = $e == 1 ? 2 : 1;  # $o for 'other end'
    my $IN = &open2('R', $efiles{IN}, "end-$e input fastq");
    my $OUT = &open2('W', $efiles{OUT}, "unaligned-pair end-$e fastq");
    $ALN = &open2('W', $efiles{ALN}, "aligned-pair end-$e fastq") if $aligned;
    %ORPH = ();
    if ($PE) {
        if ($as_single) {
            ## No orphan pairs, only single orphan reads ($as_single)
            my $FH0 = &open2('W', $efiles{ORPH}, "End $e orphans fastq");
            $ORPH{0} = $FH0;
        } else {
            ## Orphans will be written as pairs, to one file or another...
            my ($FHE, $FHO);
            if ($AIO) {
                ## Orphans as pairs, going to master fastq pair (orphans not separated)
                $FHE = $FHO = $OUT;
            } elsif ($split) {
                ## Orphans as pairs, End-1 and End-2 orphans get separate fastq pairs
                $FHE = &open2('W', $efiles{"ORPH$e"}, "end-$e orphans fastq, read #$e");  ##  THIS-END ORPHAN -- THIS-END READ
                $FHO = &open2('W', $efiles{"ORPH$o"}, "end-$o orphans fastq, read #$e");  ## OTHER-END ORPHAN -- THIS-END READ
            } else {  # then $default
                ## Orphans as pairs, End-1 and End-2 going to one all-orphans fastq pair
                $FHE = &open2('W', $efiles{ORPH}, "orphans fastq, read #$e");  ##   ANY-END ORPHAN -- THIS-END READ
            }
            $ORPH{$e} = $FHE;
            $ORPH{$o} = $FHO if $FHO;
        }
    }
    
    print STDERR "Filtering end-$e $ext: ",`date`;
    if ($ext eq 'fastq') {
        my ($i, $header, $rec);
        while (<$IN>) {
            $i++;
            $rec .= $_;   # INCL. NEWLINE
            if ($i == 1) {
                ($header = $_) =~ s/^@//;
                $header = (split /\s+/, $header)[0];
                $counts{PAIRS}++ if $e == 1;  # only count once per pair; if PE, assumes fq1 and fq2 have same headers (which they had better!)
            } elsif ($i == 4) {
                &process_header($header, $rec, $e, $o, $OUT);
                $i = 0;
                $rec = undef;
            }
        }
    } else {
        ## else fasta
        my ($header, $seq);
        while (<$IN>) {
            if (/^>(.*)[\r\n]$/) {
                &process_header($header, $seq, $e, $o, $OUT) if $seq;
                $header = $1;
                $seq = $_;
                $counts{PAIRS}++ if $e == 1;  # only count once per pair; if PE, assumes fq1 and fq2 have same headers (which they had better!)
            } else {
                $seq .= $_;  # INCL. NEWLINE
            }
        }
        &process_header($header, $seq, $e, $o, $OUT);
    }
    
    close $IN;
    close $OUT;
    &purge($efiles{OUT}, $fcounts{$e}{OUT});
    &purge($efiles{ALN}, $fcounts{$e}{ALN}) if $aligned;
    
    if ($PE) {
        if ($as_single) {
            my $FH = $ORPH{0};
            close $FH;
            &purge($efiles{ORPH}, $fcounts{$e}{ORPH});
        } elsif ($AIO) {
            ## do nothing
        } else {
            my $FH = $ORPH{$e};
            close $FH;
            &purge($efiles{"ORPH$e"}, $fcounts{$e}{"ORPH$e"});
            if ($split) {
                my $FH = $ORPH{$o};
                close $FH;
                &purge($efiles{"ORPH$o"}, $fcounts{$e}{"ORPH$o"});
            }
        }
    }
    
}

print STDERR "ALIGNMENTS: @align_files\n";
my $maxlen = (sort {$b <=> $a} (length($counts{PAIRS}), length($counts{ALIGNS})))[0];
my $fmt = '%'.length($counts{PAIRS}).'i %s'."\n";
if ($PE) {
    $counts{"E${_}U"} = $counts{PAIRS} - $counts{"E${_}P"} foreach (1,2);
    print STDERR sprintf($fmt, $counts{ALIGNS}, 'total alignments');
    print STDERR sprintf($fmt, $counts{E1A}   , 'end 1 alignments');
    print STDERR sprintf($fmt, $counts{E2A}   , 'end 2 alignments');
    print STDERR sprintf($fmt, $counts{PAIRS} , 'total pairs');
    print STDERR sprintf($fmt, $counts{PAIRA} , 'fully aligned');
    print STDERR sprintf($fmt, $counts{PAIRU} , 'fully unaligned');
    print STDERR sprintf($fmt, $counts{E1P}   , 'end-1 aligned');
    print STDERR sprintf($fmt, $counts{E2P}   , 'end-2 aligned');
    print STDERR sprintf($fmt, $counts{ORPH2} , 'end-1 aligned ONLY');
    print STDERR sprintf($fmt, $counts{ORPH1} , 'end-2 aligned ONLY');
    print STDERR sprintf($fmt, $counts{E1U}   , 'end-1 unaligned');
    print STDERR sprintf($fmt, $counts{E2U}   , 'end-2 unaligned');
    unless ($as_single) {
        print STDERR "End $_ Orphans: ",$fcounts{1}{"ORPH$_"}," FQ1, ",$fcounts{2}{"ORPH$_"}," FQ2 \n" foreach (1,2);
    }
} else {
    print STDERR sprintf($fmt, $counts{PAIRS} , 'total reads');
    print STDERR sprintf($fmt, $counts{E1P}   , 'aligned');
    print STDERR sprintf($fmt, $counts{E1U}   , 'unaligned');
}

system "rm -f @orphfiles" if $no_orphans;
print STDERR "$0 complete: ",`date`;
exit;




sub purge {
    my ($FILE, $CTS) = @_;
    unless ($CTS) {
        print STDERR "No reads were send to file $FILE: removing...\n";
        system "rm -f $FILE";
    }
}


sub process_header {
    my ($HEADER, $DATA, $E, $O, $OUTFH) = @_;
    
    if (! exists $headers{$HEADER}) {
        ## fully unaligned; write pair
        print $OUTFH $DATA;
        $fcounts{$E}{OUT}++;  ## DO NOT increment $fcounts{$O}{OUT}.  That will be done when filtering the other fastq.
        if ($PE) {
            $counts{PAIRU}++ if $E == 1;  # only count once per pair
        } else {
            $counts{E1U}++;
        }
    } elsif (!$PE) {
        ## Single end, aligned, ignore
        $counts{E1P}++;
        print $ALN $DATA if $aligned;
        $fcounts{$E}{ALN}++;
    } elsif ($headers{$HEADER}{$E}) {
        ## This end aligned...
        $counts{"E${E}P"}++;
        if ($headers{$HEADER}{$O}) {
            ## the other end also aligned; not otherwise interesting
            $counts{PAIRA}++ if $E == 1;  # only count once per pair
        } elsif (!$as_single) {
            ## OTHER END IS AN ORPHAN.
            ## this only matters if writing orphan pairs (i.e., !$as_single)
            ## do not record orphan stats here, only count reads written
            ## IF $SPLIT: WRITE THIS-END READ TO OTHER-END ORPHAN FASTQ PAIR
            my $EO = $split ? $O : $E;  # if $split, send to fastq pair of origin.  Otherwise, it's all the same.
            my $FHO = $ORPH{$EO};
            print $FHO $DATA;
            $fcounts{$E}{"ORPH$EO"}++;
        } elsif ($aligned) {
            print $ALN $DATA if $aligned;
            $fcounts{$E}{ALN}++;
        }
    } elsif ($headers{$HEADER}{$O}) {
        ## ONLY the other end aligned
        ## THIS END IS THE ORPHAN.
        ## canonical orphan handling here, including stats
        ## IF $SPLIT: WRITE THIS-END READ TO THIS-END ORPHAN FASTQ PAIR
        $counts{"ORPH$E"}++;
        if ($as_single) {
            my $FH = $ORPH{0};
            print $FH $DATA;
            $fcounts{$E}{ORPH}++;
        } else {
            my $FHE = $ORPH{$E};
            print $FHE $DATA;
            $fcounts{$E}{"ORPH$E"}++;
        }
    } else {
        ## ???
        print "Undetermined state: $HEADER end $E, $headers{$HEADER}{1}/$headers{$HEADER}{2}\n";
    }
}
